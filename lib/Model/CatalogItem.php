<?php
/**
 * CatalogItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Procurement
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Procurement API
 *
 * ConnectWise Procurement API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Procurement\Model;

use \ArrayAccess;

/**
 * CatalogItem Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Procurement
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CatalogItem implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CatalogItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'identifier' => 'string',
        'description' => 'string',
        'inactive_flag' => 'bool',
        'subcategory' => '\Spinen\ConnectWise\Clients\Procurement\Model\ProductSubCategoryReference',
        'type' => '\Spinen\ConnectWise\Clients\Procurement\Model\ProductTypeReference',
        'product_class' => 'string',
        'serialized_flag' => 'bool',
        'serialized_cost_flag' => 'bool',
        'phase_product_flag' => 'bool',
        'unit_of_measure' => '\Spinen\ConnectWise\Clients\Procurement\Model\UnitOfMeasureReference',
        'min_stock_level' => 'int',
        'price' => 'double',
        'cost' => 'double',
        'price_attribute' => 'string',
        'taxable_flag' => 'bool',
        'customer_description' => 'string',
        'manufacturer' => '\Spinen\ConnectWise\Clients\Procurement\Model\ManufacturerReference',
        'manufacturer_part_number' => 'string',
        'vendor' => '\Spinen\ConnectWise\Clients\Procurement\Model\CompanyReference',
        'vendor_sku' => 'string',
        'notes' => 'string',
        'integration_x_ref' => 'string',
        'date_entered' => 'string',
        'category' => '\Spinen\ConnectWise\Clients\Procurement\Model\ProductCategoryReference',
        '_info' => '\Spinen\ConnectWise\Clients\Procurement\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'identifier' => 'identifier',
        'description' => 'description',
        'inactive_flag' => 'inactiveFlag',
        'subcategory' => 'subcategory',
        'type' => 'type',
        'product_class' => 'productClass',
        'serialized_flag' => 'serializedFlag',
        'serialized_cost_flag' => 'serializedCostFlag',
        'phase_product_flag' => 'phaseProductFlag',
        'unit_of_measure' => 'unitOfMeasure',
        'min_stock_level' => 'minStockLevel',
        'price' => 'price',
        'cost' => 'cost',
        'price_attribute' => 'priceAttribute',
        'taxable_flag' => 'taxableFlag',
        'customer_description' => 'customerDescription',
        'manufacturer' => 'manufacturer',
        'manufacturer_part_number' => 'manufacturerPartNumber',
        'vendor' => 'vendor',
        'vendor_sku' => 'vendorSku',
        'notes' => 'notes',
        'integration_x_ref' => 'integrationXRef',
        'date_entered' => 'dateEntered',
        'category' => 'category',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'identifier' => 'setIdentifier',
        'description' => 'setDescription',
        'inactive_flag' => 'setInactiveFlag',
        'subcategory' => 'setSubcategory',
        'type' => 'setType',
        'product_class' => 'setProductClass',
        'serialized_flag' => 'setSerializedFlag',
        'serialized_cost_flag' => 'setSerializedCostFlag',
        'phase_product_flag' => 'setPhaseProductFlag',
        'unit_of_measure' => 'setUnitOfMeasure',
        'min_stock_level' => 'setMinStockLevel',
        'price' => 'setPrice',
        'cost' => 'setCost',
        'price_attribute' => 'setPriceAttribute',
        'taxable_flag' => 'setTaxableFlag',
        'customer_description' => 'setCustomerDescription',
        'manufacturer' => 'setManufacturer',
        'manufacturer_part_number' => 'setManufacturerPartNumber',
        'vendor' => 'setVendor',
        'vendor_sku' => 'setVendorSku',
        'notes' => 'setNotes',
        'integration_x_ref' => 'setIntegrationXRef',
        'date_entered' => 'setDateEntered',
        'category' => 'setCategory',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'identifier' => 'getIdentifier',
        'description' => 'getDescription',
        'inactive_flag' => 'getInactiveFlag',
        'subcategory' => 'getSubcategory',
        'type' => 'getType',
        'product_class' => 'getProductClass',
        'serialized_flag' => 'getSerializedFlag',
        'serialized_cost_flag' => 'getSerializedCostFlag',
        'phase_product_flag' => 'getPhaseProductFlag',
        'unit_of_measure' => 'getUnitOfMeasure',
        'min_stock_level' => 'getMinStockLevel',
        'price' => 'getPrice',
        'cost' => 'getCost',
        'price_attribute' => 'getPriceAttribute',
        'taxable_flag' => 'getTaxableFlag',
        'customer_description' => 'getCustomerDescription',
        'manufacturer' => 'getManufacturer',
        'manufacturer_part_number' => 'getManufacturerPartNumber',
        'vendor' => 'getVendor',
        'vendor_sku' => 'getVendorSku',
        'notes' => 'getNotes',
        'integration_x_ref' => 'getIntegrationXRef',
        'date_entered' => 'getDateEntered',
        'category' => 'getCategory',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PRODUCT_CLASS_AGREEMENT = 'Agreement';
    const PRODUCT_CLASS_BUNDLE = 'Bundle';
    const PRODUCT_CLASS_INVENTORY = 'Inventory';
    const PRODUCT_CLASS_NON_INVENTORY = 'NonInventory';
    const PRODUCT_CLASS_SERVICE = 'Service';
    const PRICE_ATTRIBUTE_FIXED_FEE = 'FixedFee';
    const PRICE_ATTRIBUTE_NOT_TO_EXCEED = 'NotToExceed';
    const PRICE_ATTRIBUTE_TIME_AND_MATERIALS = 'TimeAndMaterials';
    const PRICE_ATTRIBUTE_OVERRIDE_RATE = 'OverrideRate';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getProductClassAllowableValues()
    {
        return [
            self::PRODUCT_CLASS_AGREEMENT,
            self::PRODUCT_CLASS_BUNDLE,
            self::PRODUCT_CLASS_INVENTORY,
            self::PRODUCT_CLASS_NON_INVENTORY,
            self::PRODUCT_CLASS_SERVICE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPriceAttributeAllowableValues()
    {
        return [
            self::PRICE_ATTRIBUTE_FIXED_FEE,
            self::PRICE_ATTRIBUTE_NOT_TO_EXCEED,
            self::PRICE_ATTRIBUTE_TIME_AND_MATERIALS,
            self::PRICE_ATTRIBUTE_OVERRIDE_RATE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['inactive_flag'] = isset($data['inactive_flag']) ? $data['inactive_flag'] : null;
        $this->container['subcategory'] = isset($data['subcategory']) ? $data['subcategory'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['product_class'] = isset($data['product_class']) ? $data['product_class'] : null;
        $this->container['serialized_flag'] = isset($data['serialized_flag']) ? $data['serialized_flag'] : null;
        $this->container['serialized_cost_flag'] = isset($data['serialized_cost_flag']) ? $data['serialized_cost_flag'] : null;
        $this->container['phase_product_flag'] = isset($data['phase_product_flag']) ? $data['phase_product_flag'] : null;
        $this->container['unit_of_measure'] = isset($data['unit_of_measure']) ? $data['unit_of_measure'] : null;
        $this->container['min_stock_level'] = isset($data['min_stock_level']) ? $data['min_stock_level'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['price_attribute'] = isset($data['price_attribute']) ? $data['price_attribute'] : null;
        $this->container['taxable_flag'] = isset($data['taxable_flag']) ? $data['taxable_flag'] : null;
        $this->container['customer_description'] = isset($data['customer_description']) ? $data['customer_description'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['manufacturer_part_number'] = isset($data['manufacturer_part_number']) ? $data['manufacturer_part_number'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
        $this->container['vendor_sku'] = isset($data['vendor_sku']) ? $data['vendor_sku'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['integration_x_ref'] = isset($data['integration_x_ref']) ? $data['integration_x_ref'] : null;
        $this->container['date_entered'] = isset($data['date_entered']) ? $data['date_entered'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['identifier'] === null) {
            $invalid_properties[] = "'identifier' can't be null";
        }
        if ((strlen($this->container['identifier']) > 30)) {
            $invalid_properties[] = "invalid value for 'identifier', the character length must be smaller than or equal to 30.";
        }

        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ((strlen($this->container['description']) > 50)) {
            $invalid_properties[] = "invalid value for 'description', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['subcategory'] === null) {
            $invalid_properties[] = "'subcategory' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = ["Agreement", "Bundle", "Inventory", "NonInventory", "Service"];
        if (!in_array($this->container['product_class'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'product_class', must be one of #{allowed_values}.";
        }

        $allowed_values = ["FixedFee", "NotToExceed", "TimeAndMaterials", "OverrideRate"];
        if (!in_array($this->container['price_attribute'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'price_attribute', must be one of #{allowed_values}.";
        }

        if ($this->container['customer_description'] === null) {
            $invalid_properties[] = "'customer_description' can't be null";
        }
        if ((strlen($this->container['customer_description']) > 6000)) {
            $invalid_properties[] = "invalid value for 'customer_description', the character length must be smaller than or equal to 6000.";
        }

        if (!is_null($this->container['manufacturer_part_number']) && (strlen($this->container['manufacturer_part_number']) > 50)) {
            $invalid_properties[] = "invalid value for 'manufacturer_part_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['vendor_sku']) && (strlen($this->container['vendor_sku']) > 50)) {
            $invalid_properties[] = "invalid value for 'vendor_sku', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['integration_x_ref']) && (strlen($this->container['integration_x_ref']) > 50)) {
            $invalid_properties[] = "invalid value for 'integration_x_ref', the character length must be smaller than or equal to 50.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['identifier'] === null) {
            return false;
        }
        if (strlen($this->container['identifier']) > 30) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if (strlen($this->container['description']) > 50) {
            return false;
        }
        if ($this->container['subcategory'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = ["Agreement", "Bundle", "Inventory", "NonInventory", "Service"];
        if (!in_array($this->container['product_class'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["FixedFee", "NotToExceed", "TimeAndMaterials", "OverrideRate"];
        if (!in_array($this->container['price_attribute'], $allowed_values)) {
            return false;
        }
        if ($this->container['customer_description'] === null) {
            return false;
        }
        if (strlen($this->container['customer_description']) > 6000) {
            return false;
        }
        if (strlen($this->container['manufacturer_part_number']) > 50) {
            return false;
        }
        if (strlen($this->container['vendor_sku']) > 50) {
            return false;
        }
        if (strlen($this->container['integration_x_ref']) > 50) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identifier
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     * @param string $identifier
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        if ((strlen($identifier) > 30)) {
            throw new \InvalidArgumentException('invalid length for $identifier when calling CatalogItem., must be smaller than or equal to 30.');
        }

        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        if ((strlen($description) > 50)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CatalogItem., must be smaller than or equal to 50.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets inactive_flag
     * @return bool
     */
    public function getInactiveFlag()
    {
        return $this->container['inactive_flag'];
    }

    /**
     * Sets inactive_flag
     * @param bool $inactive_flag
     * @return $this
     */
    public function setInactiveFlag($inactive_flag)
    {
        $this->container['inactive_flag'] = $inactive_flag;

        return $this;
    }

    /**
     * Gets subcategory
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\ProductSubCategoryReference
     */
    public function getSubcategory()
    {
        return $this->container['subcategory'];
    }

    /**
     * Sets subcategory
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\ProductSubCategoryReference $subcategory
     * @return $this
     */
    public function setSubcategory($subcategory)
    {
        $this->container['subcategory'] = $subcategory;

        return $this;
    }

    /**
     * Gets type
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\ProductTypeReference
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\ProductTypeReference $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets product_class
     * @return string
     */
    public function getProductClass()
    {
        return $this->container['product_class'];
    }

    /**
     * Sets product_class
     * @param string $product_class Defaults to Non-Inventory
     * @return $this
     */
    public function setProductClass($product_class)
    {
        $allowed_values = array('Agreement', 'Bundle', 'Inventory', 'NonInventory', 'Service');
        if (!is_null($product_class) && (!in_array($product_class, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'product_class', must be one of 'Agreement', 'Bundle', 'Inventory', 'NonInventory', 'Service'");
        }
        $this->container['product_class'] = $product_class;

        return $this;
    }

    /**
     * Gets serialized_flag
     * @return bool
     */
    public function getSerializedFlag()
    {
        return $this->container['serialized_flag'];
    }

    /**
     * Sets serialized_flag
     * @param bool $serialized_flag
     * @return $this
     */
    public function setSerializedFlag($serialized_flag)
    {
        $this->container['serialized_flag'] = $serialized_flag;

        return $this;
    }

    /**
     * Gets serialized_cost_flag
     * @return bool
     */
    public function getSerializedCostFlag()
    {
        return $this->container['serialized_cost_flag'];
    }

    /**
     * Sets serialized_cost_flag
     * @param bool $serialized_cost_flag
     * @return $this
     */
    public function setSerializedCostFlag($serialized_cost_flag)
    {
        $this->container['serialized_cost_flag'] = $serialized_cost_flag;

        return $this;
    }

    /**
     * Gets phase_product_flag
     * @return bool
     */
    public function getPhaseProductFlag()
    {
        return $this->container['phase_product_flag'];
    }

    /**
     * Sets phase_product_flag
     * @param bool $phase_product_flag
     * @return $this
     */
    public function setPhaseProductFlag($phase_product_flag)
    {
        $this->container['phase_product_flag'] = $phase_product_flag;

        return $this;
    }

    /**
     * Gets unit_of_measure
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\UnitOfMeasureReference
     */
    public function getUnitOfMeasure()
    {
        return $this->container['unit_of_measure'];
    }

    /**
     * Sets unit_of_measure
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\UnitOfMeasureReference $unit_of_measure
     * @return $this
     */
    public function setUnitOfMeasure($unit_of_measure)
    {
        $this->container['unit_of_measure'] = $unit_of_measure;

        return $this;
    }

    /**
     * Gets min_stock_level
     * @return int
     */
    public function getMinStockLevel()
    {
        return $this->container['min_stock_level'];
    }

    /**
     * Sets min_stock_level
     * @param int $min_stock_level
     * @return $this
     */
    public function setMinStockLevel($min_stock_level)
    {
        $this->container['min_stock_level'] = $min_stock_level;

        return $this;
    }

    /**
     * Gets price
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param double $price
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets cost
     * @return double
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     * @param double $cost
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets price_attribute
     * @return string
     */
    public function getPriceAttribute()
    {
        return $this->container['price_attribute'];
    }

    /**
     * Sets price_attribute
     * @param string $price_attribute
     * @return $this
     */
    public function setPriceAttribute($price_attribute)
    {
        $allowed_values = array('FixedFee', 'NotToExceed', 'TimeAndMaterials', 'OverrideRate');
        if (!is_null($price_attribute) && (!in_array($price_attribute, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'price_attribute', must be one of 'FixedFee', 'NotToExceed', 'TimeAndMaterials', 'OverrideRate'");
        }
        $this->container['price_attribute'] = $price_attribute;

        return $this;
    }

    /**
     * Gets taxable_flag
     * @return bool
     */
    public function getTaxableFlag()
    {
        return $this->container['taxable_flag'];
    }

    /**
     * Sets taxable_flag
     * @param bool $taxable_flag
     * @return $this
     */
    public function setTaxableFlag($taxable_flag)
    {
        $this->container['taxable_flag'] = $taxable_flag;

        return $this;
    }

    /**
     * Gets customer_description
     * @return string
     */
    public function getCustomerDescription()
    {
        return $this->container['customer_description'];
    }

    /**
     * Sets customer_description
     * @param string $customer_description
     * @return $this
     */
    public function setCustomerDescription($customer_description)
    {
        if ((strlen($customer_description) > 6000)) {
            throw new \InvalidArgumentException('invalid length for $customer_description when calling CatalogItem., must be smaller than or equal to 6000.');
        }

        $this->container['customer_description'] = $customer_description;

        return $this;
    }

    /**
     * Gets manufacturer
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\ManufacturerReference
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\ManufacturerReference $manufacturer
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets manufacturer_part_number
     * @return string
     */
    public function getManufacturerPartNumber()
    {
        return $this->container['manufacturer_part_number'];
    }

    /**
     * Sets manufacturer_part_number
     * @param string $manufacturer_part_number
     * @return $this
     */
    public function setManufacturerPartNumber($manufacturer_part_number)
    {
        if (!is_null($manufacturer_part_number) && (strlen($manufacturer_part_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_part_number when calling CatalogItem., must be smaller than or equal to 50.');
        }

        $this->container['manufacturer_part_number'] = $manufacturer_part_number;

        return $this;
    }

    /**
     * Gets vendor
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\CompanyReference
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\CompanyReference $vendor
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets vendor_sku
     * @return string
     */
    public function getVendorSku()
    {
        return $this->container['vendor_sku'];
    }

    /**
     * Sets vendor_sku
     * @param string $vendor_sku
     * @return $this
     */
    public function setVendorSku($vendor_sku)
    {
        if (!is_null($vendor_sku) && (strlen($vendor_sku) > 50)) {
            throw new \InvalidArgumentException('invalid length for $vendor_sku when calling CatalogItem., must be smaller than or equal to 50.');
        }

        $this->container['vendor_sku'] = $vendor_sku;

        return $this;
    }

    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param string $notes
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets integration_x_ref
     * @return string
     */
    public function getIntegrationXRef()
    {
        return $this->container['integration_x_ref'];
    }

    /**
     * Sets integration_x_ref
     * @param string $integration_x_ref
     * @return $this
     */
    public function setIntegrationXRef($integration_x_ref)
    {
        if (!is_null($integration_x_ref) && (strlen($integration_x_ref) > 50)) {
            throw new \InvalidArgumentException('invalid length for $integration_x_ref when calling CatalogItem., must be smaller than or equal to 50.');
        }

        $this->container['integration_x_ref'] = $integration_x_ref;

        return $this;
    }

    /**
     * Gets date_entered
     * @return string
     */
    public function getDateEntered()
    {
        return $this->container['date_entered'];
    }

    /**
     * Sets date_entered
     * @param string $date_entered
     * @return $this
     */
    public function setDateEntered($date_entered)
    {
        $this->container['date_entered'] = $date_entered;

        return $this;
    }

    /**
     * Gets category
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\ProductCategoryReference
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\ProductCategoryReference $category
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Procurement\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Procurement\ObjectSerializer::sanitizeForSerialization($this));
    }
}


