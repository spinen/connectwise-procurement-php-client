<?php
/**
 * PurchaseOrderLineItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Procurement
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Procurement API
 *
 * ConnectWise Procurement API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model;

use \ArrayAccess;

/**
 * PurchaseOrderLineItem Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Procurement
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PurchaseOrderLineItem implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseOrderLineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'backordered_flag' => 'bool',
        'canceled_by' => 'string',
        'canceled_flag' => 'bool',
        'canceled_reason' => 'string',
        'closed_flag' => 'bool',
        'date_canceled' => '\DateTime',
        'date_canceled_utc' => '\DateTime',
        'description' => 'string',
        'display_internal_notes_flag' => 'bool',
        'expected_ship_date' => '\DateTime',
        'internal_notes' => 'string',
        'line_number' => 'int',
        'packing_slip' => 'string',
        'product' => '\Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\IvItemReference',
        'purchase_order_id' => 'int',
        'quantity' => 'double',
        'received_quantity' => 'int',
        'serial_numbers' => 'string',
        'ship_date' => '\DateTime',
        'shipment_method' => '\Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\ShipmentMethodReference',
        'tax' => 'double',
        'tracking_number' => 'string',
        'unit_cost' => 'double',
        'unit_of_measure' => '\Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\UnitOfMeasureReference',
        'vendor_order_number' => 'string',
        'warehouse' => '\Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\WarehouseReference',
        'warehouse_bin' => '\Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\WarehouseBinReference',
        '_info' => '\Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'backordered_flag' => 'backorderedFlag',
        'canceled_by' => 'canceledBy',
        'canceled_flag' => 'canceledFlag',
        'canceled_reason' => 'canceledReason',
        'closed_flag' => 'closedFlag',
        'date_canceled' => 'dateCanceled',
        'date_canceled_utc' => 'dateCanceledUtc',
        'description' => 'description',
        'display_internal_notes_flag' => 'displayInternalNotesFlag',
        'expected_ship_date' => 'expectedShipDate',
        'internal_notes' => 'internalNotes',
        'line_number' => 'lineNumber',
        'packing_slip' => 'packingSlip',
        'product' => 'product',
        'purchase_order_id' => 'purchaseOrderId',
        'quantity' => 'quantity',
        'received_quantity' => 'receivedQuantity',
        'serial_numbers' => 'serialNumbers',
        'ship_date' => 'shipDate',
        'shipment_method' => 'shipmentMethod',
        'tax' => 'tax',
        'tracking_number' => 'trackingNumber',
        'unit_cost' => 'unitCost',
        'unit_of_measure' => 'unitOfMeasure',
        'vendor_order_number' => 'vendorOrderNumber',
        'warehouse' => 'warehouse',
        'warehouse_bin' => 'warehouseBin',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'backordered_flag' => 'setBackorderedFlag',
        'canceled_by' => 'setCanceledBy',
        'canceled_flag' => 'setCanceledFlag',
        'canceled_reason' => 'setCanceledReason',
        'closed_flag' => 'setClosedFlag',
        'date_canceled' => 'setDateCanceled',
        'date_canceled_utc' => 'setDateCanceledUtc',
        'description' => 'setDescription',
        'display_internal_notes_flag' => 'setDisplayInternalNotesFlag',
        'expected_ship_date' => 'setExpectedShipDate',
        'internal_notes' => 'setInternalNotes',
        'line_number' => 'setLineNumber',
        'packing_slip' => 'setPackingSlip',
        'product' => 'setProduct',
        'purchase_order_id' => 'setPurchaseOrderId',
        'quantity' => 'setQuantity',
        'received_quantity' => 'setReceivedQuantity',
        'serial_numbers' => 'setSerialNumbers',
        'ship_date' => 'setShipDate',
        'shipment_method' => 'setShipmentMethod',
        'tax' => 'setTax',
        'tracking_number' => 'setTrackingNumber',
        'unit_cost' => 'setUnitCost',
        'unit_of_measure' => 'setUnitOfMeasure',
        'vendor_order_number' => 'setVendorOrderNumber',
        'warehouse' => 'setWarehouse',
        'warehouse_bin' => 'setWarehouseBin',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'backordered_flag' => 'getBackorderedFlag',
        'canceled_by' => 'getCanceledBy',
        'canceled_flag' => 'getCanceledFlag',
        'canceled_reason' => 'getCanceledReason',
        'closed_flag' => 'getClosedFlag',
        'date_canceled' => 'getDateCanceled',
        'date_canceled_utc' => 'getDateCanceledUtc',
        'description' => 'getDescription',
        'display_internal_notes_flag' => 'getDisplayInternalNotesFlag',
        'expected_ship_date' => 'getExpectedShipDate',
        'internal_notes' => 'getInternalNotes',
        'line_number' => 'getLineNumber',
        'packing_slip' => 'getPackingSlip',
        'product' => 'getProduct',
        'purchase_order_id' => 'getPurchaseOrderId',
        'quantity' => 'getQuantity',
        'received_quantity' => 'getReceivedQuantity',
        'serial_numbers' => 'getSerialNumbers',
        'ship_date' => 'getShipDate',
        'shipment_method' => 'getShipmentMethod',
        'tax' => 'getTax',
        'tracking_number' => 'getTrackingNumber',
        'unit_cost' => 'getUnitCost',
        'unit_of_measure' => 'getUnitOfMeasure',
        'vendor_order_number' => 'getVendorOrderNumber',
        'warehouse' => 'getWarehouse',
        'warehouse_bin' => 'getWarehouseBin',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['backordered_flag'] = isset($data['backordered_flag']) ? $data['backordered_flag'] : null;
        $this->container['canceled_by'] = isset($data['canceled_by']) ? $data['canceled_by'] : null;
        $this->container['canceled_flag'] = isset($data['canceled_flag']) ? $data['canceled_flag'] : null;
        $this->container['canceled_reason'] = isset($data['canceled_reason']) ? $data['canceled_reason'] : null;
        $this->container['closed_flag'] = isset($data['closed_flag']) ? $data['closed_flag'] : null;
        $this->container['date_canceled'] = isset($data['date_canceled']) ? $data['date_canceled'] : null;
        $this->container['date_canceled_utc'] = isset($data['date_canceled_utc']) ? $data['date_canceled_utc'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['display_internal_notes_flag'] = isset($data['display_internal_notes_flag']) ? $data['display_internal_notes_flag'] : null;
        $this->container['expected_ship_date'] = isset($data['expected_ship_date']) ? $data['expected_ship_date'] : null;
        $this->container['internal_notes'] = isset($data['internal_notes']) ? $data['internal_notes'] : null;
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['packing_slip'] = isset($data['packing_slip']) ? $data['packing_slip'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['purchase_order_id'] = isset($data['purchase_order_id']) ? $data['purchase_order_id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['received_quantity'] = isset($data['received_quantity']) ? $data['received_quantity'] : null;
        $this->container['serial_numbers'] = isset($data['serial_numbers']) ? $data['serial_numbers'] : null;
        $this->container['ship_date'] = isset($data['ship_date']) ? $data['ship_date'] : null;
        $this->container['shipment_method'] = isset($data['shipment_method']) ? $data['shipment_method'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['tracking_number'] = isset($data['tracking_number']) ? $data['tracking_number'] : null;
        $this->container['unit_cost'] = isset($data['unit_cost']) ? $data['unit_cost'] : null;
        $this->container['unit_of_measure'] = isset($data['unit_of_measure']) ? $data['unit_of_measure'] : null;
        $this->container['vendor_order_number'] = isset($data['vendor_order_number']) ? $data['vendor_order_number'] : null;
        $this->container['warehouse'] = isset($data['warehouse']) ? $data['warehouse'] : null;
        $this->container['warehouse_bin'] = isset($data['warehouse_bin']) ? $data['warehouse_bin'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['canceled_reason']) && (strlen($this->container['canceled_reason']) > 100)) {
            $invalid_properties[] = "invalid value for 'canceled_reason', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ((strlen($this->container['description']) > 6000)) {
            $invalid_properties[] = "invalid value for 'description', the character length must be smaller than or equal to 6000.";
        }

        if (!is_null($this->container['internal_notes']) && (strlen($this->container['internal_notes']) > 1000)) {
            $invalid_properties[] = "invalid value for 'internal_notes', the character length must be smaller than or equal to 1000.";
        }

        if ($this->container['line_number'] === null) {
            $invalid_properties[] = "'line_number' can't be null";
        }
        if (!is_null($this->container['packing_slip']) && (strlen($this->container['packing_slip']) > 30)) {
            $invalid_properties[] = "invalid value for 'packing_slip', the character length must be smaller than or equal to 30.";
        }

        if ($this->container['product'] === null) {
            $invalid_properties[] = "'product' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalid_properties[] = "'quantity' can't be null";
        }
        if (!is_null($this->container['serial_numbers']) && (strlen($this->container['serial_numbers']) > 100)) {
            $invalid_properties[] = "invalid value for 'serial_numbers', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['tracking_number']) && (strlen($this->container['tracking_number']) > 50)) {
            $invalid_properties[] = "invalid value for 'tracking_number', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['unit_of_measure'] === null) {
            $invalid_properties[] = "'unit_of_measure' can't be null";
        }
        if (!is_null($this->container['vendor_order_number']) && (strlen($this->container['vendor_order_number']) > 50)) {
            $invalid_properties[] = "invalid value for 'vendor_order_number', the character length must be smaller than or equal to 50.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['canceled_reason']) > 100) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if (strlen($this->container['description']) > 6000) {
            return false;
        }
        if (strlen($this->container['internal_notes']) > 1000) {
            return false;
        }
        if ($this->container['line_number'] === null) {
            return false;
        }
        if (strlen($this->container['packing_slip']) > 30) {
            return false;
        }
        if ($this->container['product'] === null) {
            return false;
        }
        if ($this->container['quantity'] === null) {
            return false;
        }
        if (strlen($this->container['serial_numbers']) > 100) {
            return false;
        }
        if (strlen($this->container['tracking_number']) > 50) {
            return false;
        }
        if ($this->container['unit_of_measure'] === null) {
            return false;
        }
        if (strlen($this->container['vendor_order_number']) > 50) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets backordered_flag
     * @return bool
     */
    public function getBackorderedFlag()
    {
        return $this->container['backordered_flag'];
    }

    /**
     * Sets backordered_flag
     * @param bool $backordered_flag
     * @return $this
     */
    public function setBackorderedFlag($backordered_flag)
    {
        $this->container['backordered_flag'] = $backordered_flag;

        return $this;
    }

    /**
     * Gets canceled_by
     * @return string
     */
    public function getCanceledBy()
    {
        return $this->container['canceled_by'];
    }

    /**
     * Sets canceled_by
     * @param string $canceled_by
     * @return $this
     */
    public function setCanceledBy($canceled_by)
    {
        $this->container['canceled_by'] = $canceled_by;

        return $this;
    }

    /**
     * Gets canceled_flag
     * @return bool
     */
    public function getCanceledFlag()
    {
        return $this->container['canceled_flag'];
    }

    /**
     * Sets canceled_flag
     * @param bool $canceled_flag
     * @return $this
     */
    public function setCanceledFlag($canceled_flag)
    {
        $this->container['canceled_flag'] = $canceled_flag;

        return $this;
    }

    /**
     * Gets canceled_reason
     * @return string
     */
    public function getCanceledReason()
    {
        return $this->container['canceled_reason'];
    }

    /**
     * Sets canceled_reason
     * @param string $canceled_reason
     * @return $this
     */
    public function setCanceledReason($canceled_reason)
    {
        if (!is_null($canceled_reason) && (strlen($canceled_reason) > 100)) {
            throw new \InvalidArgumentException('invalid length for $canceled_reason when calling PurchaseOrderLineItem., must be smaller than or equal to 100.');
        }

        $this->container['canceled_reason'] = $canceled_reason;

        return $this;
    }

    /**
     * Gets closed_flag
     * @return bool
     */
    public function getClosedFlag()
    {
        return $this->container['closed_flag'];
    }

    /**
     * Sets closed_flag
     * @param bool $closed_flag
     * @return $this
     */
    public function setClosedFlag($closed_flag)
    {
        $this->container['closed_flag'] = $closed_flag;

        return $this;
    }

    /**
     * Gets date_canceled
     * @return \DateTime
     */
    public function getDateCanceled()
    {
        return $this->container['date_canceled'];
    }

    /**
     * Sets date_canceled
     * @param \DateTime $date_canceled
     * @return $this
     */
    public function setDateCanceled($date_canceled)
    {
        $this->container['date_canceled'] = $date_canceled;

        return $this;
    }

    /**
     * Gets date_canceled_utc
     * @return \DateTime
     */
    public function getDateCanceledUtc()
    {
        return $this->container['date_canceled_utc'];
    }

    /**
     * Sets date_canceled_utc
     * @param \DateTime $date_canceled_utc
     * @return $this
     */
    public function setDateCanceledUtc($date_canceled_utc)
    {
        $this->container['date_canceled_utc'] = $date_canceled_utc;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        if ((strlen($description) > 6000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling PurchaseOrderLineItem., must be smaller than or equal to 6000.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets display_internal_notes_flag
     * @return bool
     */
    public function getDisplayInternalNotesFlag()
    {
        return $this->container['display_internal_notes_flag'];
    }

    /**
     * Sets display_internal_notes_flag
     * @param bool $display_internal_notes_flag
     * @return $this
     */
    public function setDisplayInternalNotesFlag($display_internal_notes_flag)
    {
        $this->container['display_internal_notes_flag'] = $display_internal_notes_flag;

        return $this;
    }

    /**
     * Gets expected_ship_date
     * @return \DateTime
     */
    public function getExpectedShipDate()
    {
        return $this->container['expected_ship_date'];
    }

    /**
     * Sets expected_ship_date
     * @param \DateTime $expected_ship_date
     * @return $this
     */
    public function setExpectedShipDate($expected_ship_date)
    {
        $this->container['expected_ship_date'] = $expected_ship_date;

        return $this;
    }

    /**
     * Gets internal_notes
     * @return string
     */
    public function getInternalNotes()
    {
        return $this->container['internal_notes'];
    }

    /**
     * Sets internal_notes
     * @param string $internal_notes
     * @return $this
     */
    public function setInternalNotes($internal_notes)
    {
        if (!is_null($internal_notes) && (strlen($internal_notes) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $internal_notes when calling PurchaseOrderLineItem., must be smaller than or equal to 1000.');
        }

        $this->container['internal_notes'] = $internal_notes;

        return $this;
    }

    /**
     * Gets line_number
     * @return int
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     * @param int $line_number
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets packing_slip
     * @return string
     */
    public function getPackingSlip()
    {
        return $this->container['packing_slip'];
    }

    /**
     * Sets packing_slip
     * @param string $packing_slip
     * @return $this
     */
    public function setPackingSlip($packing_slip)
    {
        if (!is_null($packing_slip) && (strlen($packing_slip) > 30)) {
            throw new \InvalidArgumentException('invalid length for $packing_slip when calling PurchaseOrderLineItem., must be smaller than or equal to 30.');
        }

        $this->container['packing_slip'] = $packing_slip;

        return $this;
    }

    /**
     * Gets product
     * @return \Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\IvItemReference
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     * @param \Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\IvItemReference $product
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets purchase_order_id
     * @return int
     */
    public function getPurchaseOrderId()
    {
        return $this->container['purchase_order_id'];
    }

    /**
     * Sets purchase_order_id
     * @param int $purchase_order_id
     * @return $this
     */
    public function setPurchaseOrderId($purchase_order_id)
    {
        $this->container['purchase_order_id'] = $purchase_order_id;

        return $this;
    }

    /**
     * Gets quantity
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param double $quantity
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets received_quantity
     * @return int
     */
    public function getReceivedQuantity()
    {
        return $this->container['received_quantity'];
    }

    /**
     * Sets received_quantity
     * @param int $received_quantity
     * @return $this
     */
    public function setReceivedQuantity($received_quantity)
    {
        $this->container['received_quantity'] = $received_quantity;

        return $this;
    }

    /**
     * Gets serial_numbers
     * @return string
     */
    public function getSerialNumbers()
    {
        return $this->container['serial_numbers'];
    }

    /**
     * Sets serial_numbers
     * @param string $serial_numbers
     * @return $this
     */
    public function setSerialNumbers($serial_numbers)
    {
        if (!is_null($serial_numbers) && (strlen($serial_numbers) > 100)) {
            throw new \InvalidArgumentException('invalid length for $serial_numbers when calling PurchaseOrderLineItem., must be smaller than or equal to 100.');
        }

        $this->container['serial_numbers'] = $serial_numbers;

        return $this;
    }

    /**
     * Gets ship_date
     * @return \DateTime
     */
    public function getShipDate()
    {
        return $this->container['ship_date'];
    }

    /**
     * Sets ship_date
     * @param \DateTime $ship_date
     * @return $this
     */
    public function setShipDate($ship_date)
    {
        $this->container['ship_date'] = $ship_date;

        return $this;
    }

    /**
     * Gets shipment_method
     * @return \Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\ShipmentMethodReference
     */
    public function getShipmentMethod()
    {
        return $this->container['shipment_method'];
    }

    /**
     * Sets shipment_method
     * @param \Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\ShipmentMethodReference $shipment_method
     * @return $this
     */
    public function setShipmentMethod($shipment_method)
    {
        $this->container['shipment_method'] = $shipment_method;

        return $this;
    }

    /**
     * Gets tax
     * @return double
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     * @param double $tax
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets tracking_number
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     * @param string $tracking_number
     * @return $this
     */
    public function setTrackingNumber($tracking_number)
    {
        if (!is_null($tracking_number) && (strlen($tracking_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $tracking_number when calling PurchaseOrderLineItem., must be smaller than or equal to 50.');
        }

        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets unit_cost
     * @return double
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     * @param double $unit_cost
     * @return $this
     */
    public function setUnitCost($unit_cost)
    {
        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets unit_of_measure
     * @return \Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\UnitOfMeasureReference
     */
    public function getUnitOfMeasure()
    {
        return $this->container['unit_of_measure'];
    }

    /**
     * Sets unit_of_measure
     * @param \Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\UnitOfMeasureReference $unit_of_measure
     * @return $this
     */
    public function setUnitOfMeasure($unit_of_measure)
    {
        $this->container['unit_of_measure'] = $unit_of_measure;

        return $this;
    }

    /**
     * Gets vendor_order_number
     * @return string
     */
    public function getVendorOrderNumber()
    {
        return $this->container['vendor_order_number'];
    }

    /**
     * Sets vendor_order_number
     * @param string $vendor_order_number
     * @return $this
     */
    public function setVendorOrderNumber($vendor_order_number)
    {
        if (!is_null($vendor_order_number) && (strlen($vendor_order_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $vendor_order_number when calling PurchaseOrderLineItem., must be smaller than or equal to 50.');
        }

        $this->container['vendor_order_number'] = $vendor_order_number;

        return $this;
    }

    /**
     * Gets warehouse
     * @return \Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\WarehouseReference
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     * @param \Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\WarehouseReference $warehouse
     * @return $this
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets warehouse_bin
     * @return \Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\WarehouseBinReference
     */
    public function getWarehouseBin()
    {
        return $this->container['warehouse_bin'];
    }

    /**
     * Sets warehouse_bin
     * @param \Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\WarehouseBinReference $warehouse_bin
     * @return $this
     */
    public function setWarehouseBin($warehouse_bin)
    {
        $this->container['warehouse_bin'] = $warehouse_bin;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Procurement\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Procurement\ObjectSerializer::sanitizeForSerialization($this));
    }
}


