<?php
/**
 * PurchaseOrder
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Procurement
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Procurement API
 *
 * ConnectWise Procurement API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Procurement\Model;

use \ArrayAccess;

/**
 * PurchaseOrder Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Procurement
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PurchaseOrder implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        '_info' => '\Spinen\ConnectWise\Clients\Procurement\Model\Metadata',
        'business_unit_id' => 'int',
        'cancel_reason' => 'string',
        'closed_flag' => 'bool',
        'customer_city' => 'string',
        'customer_company' => '\Spinen\ConnectWise\Clients\Procurement\Model\CompanyReference',
        'customer_contact' => '\Spinen\ConnectWise\Clients\Procurement\Model\ContactReference',
        'customer_country' => '\Spinen\ConnectWise\Clients\Procurement\Model\CountryReference',
        'customer_extension' => 'string',
        'customer_name' => 'string',
        'customer_phone' => 'string',
        'customer_site' => '\Spinen\ConnectWise\Clients\Procurement\Model\SiteReference',
        'customer_site_name' => 'string',
        'customer_state' => 'string',
        'customer_street_line1' => 'string',
        'customer_street_line2' => 'string',
        'customer_zip' => 'string',
        'date_closed' => '\DateTime',
        'drop_ship_customer_flag' => 'bool',
        'entered_by' => 'string',
        'freight_cost' => 'double',
        'freight_packing_slip' => 'string',
        'freight_tax_total' => 'double',
        'internal_notes' => 'string',
        'location_id' => 'int',
        'po_date' => '\DateTime',
        'po_number' => 'string',
        'sales_tax' => 'double',
        'shipment_date' => '\DateTime',
        'shipment_method' => '\Spinen\ConnectWise\Clients\Procurement\Model\ShipmentMethodReference',
        'shipping_instructions' => 'string',
        'status' => '\Spinen\ConnectWise\Clients\Procurement\Model\PurchaseOrderStatusReference',
        'sub_total' => 'double',
        'tax_code' => '\Spinen\ConnectWise\Clients\Procurement\Model\TaxCodeReference',
        'tax_freight_flag' => 'bool',
        'tax_po_flag' => 'bool',
        'terms' => '\Spinen\ConnectWise\Clients\Procurement\Model\BillingTermsReference',
        'total' => 'double',
        'tracking_number' => 'string',
        'update_shipment_info' => 'bool',
        'update_vendor_order_number' => 'bool',
        'vendor_company' => '\Spinen\ConnectWise\Clients\Procurement\Model\CompanyReference',
        'vendor_contact' => '\Spinen\ConnectWise\Clients\Procurement\Model\ContactReference',
        'vendor_invoice_date' => '\DateTime',
        'vendor_invoice_number' => 'string',
        'vendor_order_number' => 'string',
        'vendor_site' => '\Spinen\ConnectWise\Clients\Procurement\Model\SiteReference',
        'warehouse' => '\Spinen\ConnectWise\Clients\Procurement\Model\WarehouseReference'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        '_info' => '_info',
        'business_unit_id' => 'businessUnitId',
        'cancel_reason' => 'cancelReason',
        'closed_flag' => 'closedFlag',
        'customer_city' => 'customerCity',
        'customer_company' => 'customerCompany',
        'customer_contact' => 'customerContact',
        'customer_country' => 'customerCountry',
        'customer_extension' => 'customerExtension',
        'customer_name' => 'customerName',
        'customer_phone' => 'customerPhone',
        'customer_site' => 'customerSite',
        'customer_site_name' => 'customerSiteName',
        'customer_state' => 'customerState',
        'customer_street_line1' => 'customerStreetLine1',
        'customer_street_line2' => 'customerStreetLine2',
        'customer_zip' => 'customerZip',
        'date_closed' => 'dateClosed',
        'drop_ship_customer_flag' => 'dropShipCustomerFlag',
        'entered_by' => 'enteredBy',
        'freight_cost' => 'freightCost',
        'freight_packing_slip' => 'freightPackingSlip',
        'freight_tax_total' => 'freightTaxTotal',
        'internal_notes' => 'internalNotes',
        'location_id' => 'locationId',
        'po_date' => 'poDate',
        'po_number' => 'poNumber',
        'sales_tax' => 'salesTax',
        'shipment_date' => 'shipmentDate',
        'shipment_method' => 'shipmentMethod',
        'shipping_instructions' => 'shippingInstructions',
        'status' => 'status',
        'sub_total' => 'subTotal',
        'tax_code' => 'taxCode',
        'tax_freight_flag' => 'taxFreightFlag',
        'tax_po_flag' => 'taxPoFlag',
        'terms' => 'terms',
        'total' => 'total',
        'tracking_number' => 'trackingNumber',
        'update_shipment_info' => 'updateShipmentInfo',
        'update_vendor_order_number' => 'updateVendorOrderNumber',
        'vendor_company' => 'vendorCompany',
        'vendor_contact' => 'vendorContact',
        'vendor_invoice_date' => 'vendorInvoiceDate',
        'vendor_invoice_number' => 'vendorInvoiceNumber',
        'vendor_order_number' => 'vendorOrderNumber',
        'vendor_site' => 'vendorSite',
        'warehouse' => 'warehouse'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        '_info' => 'setInfo',
        'business_unit_id' => 'setBusinessUnitId',
        'cancel_reason' => 'setCancelReason',
        'closed_flag' => 'setClosedFlag',
        'customer_city' => 'setCustomerCity',
        'customer_company' => 'setCustomerCompany',
        'customer_contact' => 'setCustomerContact',
        'customer_country' => 'setCustomerCountry',
        'customer_extension' => 'setCustomerExtension',
        'customer_name' => 'setCustomerName',
        'customer_phone' => 'setCustomerPhone',
        'customer_site' => 'setCustomerSite',
        'customer_site_name' => 'setCustomerSiteName',
        'customer_state' => 'setCustomerState',
        'customer_street_line1' => 'setCustomerStreetLine1',
        'customer_street_line2' => 'setCustomerStreetLine2',
        'customer_zip' => 'setCustomerZip',
        'date_closed' => 'setDateClosed',
        'drop_ship_customer_flag' => 'setDropShipCustomerFlag',
        'entered_by' => 'setEnteredBy',
        'freight_cost' => 'setFreightCost',
        'freight_packing_slip' => 'setFreightPackingSlip',
        'freight_tax_total' => 'setFreightTaxTotal',
        'internal_notes' => 'setInternalNotes',
        'location_id' => 'setLocationId',
        'po_date' => 'setPoDate',
        'po_number' => 'setPoNumber',
        'sales_tax' => 'setSalesTax',
        'shipment_date' => 'setShipmentDate',
        'shipment_method' => 'setShipmentMethod',
        'shipping_instructions' => 'setShippingInstructions',
        'status' => 'setStatus',
        'sub_total' => 'setSubTotal',
        'tax_code' => 'setTaxCode',
        'tax_freight_flag' => 'setTaxFreightFlag',
        'tax_po_flag' => 'setTaxPoFlag',
        'terms' => 'setTerms',
        'total' => 'setTotal',
        'tracking_number' => 'setTrackingNumber',
        'update_shipment_info' => 'setUpdateShipmentInfo',
        'update_vendor_order_number' => 'setUpdateVendorOrderNumber',
        'vendor_company' => 'setVendorCompany',
        'vendor_contact' => 'setVendorContact',
        'vendor_invoice_date' => 'setVendorInvoiceDate',
        'vendor_invoice_number' => 'setVendorInvoiceNumber',
        'vendor_order_number' => 'setVendorOrderNumber',
        'vendor_site' => 'setVendorSite',
        'warehouse' => 'setWarehouse'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        '_info' => 'getInfo',
        'business_unit_id' => 'getBusinessUnitId',
        'cancel_reason' => 'getCancelReason',
        'closed_flag' => 'getClosedFlag',
        'customer_city' => 'getCustomerCity',
        'customer_company' => 'getCustomerCompany',
        'customer_contact' => 'getCustomerContact',
        'customer_country' => 'getCustomerCountry',
        'customer_extension' => 'getCustomerExtension',
        'customer_name' => 'getCustomerName',
        'customer_phone' => 'getCustomerPhone',
        'customer_site' => 'getCustomerSite',
        'customer_site_name' => 'getCustomerSiteName',
        'customer_state' => 'getCustomerState',
        'customer_street_line1' => 'getCustomerStreetLine1',
        'customer_street_line2' => 'getCustomerStreetLine2',
        'customer_zip' => 'getCustomerZip',
        'date_closed' => 'getDateClosed',
        'drop_ship_customer_flag' => 'getDropShipCustomerFlag',
        'entered_by' => 'getEnteredBy',
        'freight_cost' => 'getFreightCost',
        'freight_packing_slip' => 'getFreightPackingSlip',
        'freight_tax_total' => 'getFreightTaxTotal',
        'internal_notes' => 'getInternalNotes',
        'location_id' => 'getLocationId',
        'po_date' => 'getPoDate',
        'po_number' => 'getPoNumber',
        'sales_tax' => 'getSalesTax',
        'shipment_date' => 'getShipmentDate',
        'shipment_method' => 'getShipmentMethod',
        'shipping_instructions' => 'getShippingInstructions',
        'status' => 'getStatus',
        'sub_total' => 'getSubTotal',
        'tax_code' => 'getTaxCode',
        'tax_freight_flag' => 'getTaxFreightFlag',
        'tax_po_flag' => 'getTaxPoFlag',
        'terms' => 'getTerms',
        'total' => 'getTotal',
        'tracking_number' => 'getTrackingNumber',
        'update_shipment_info' => 'getUpdateShipmentInfo',
        'update_vendor_order_number' => 'getUpdateVendorOrderNumber',
        'vendor_company' => 'getVendorCompany',
        'vendor_contact' => 'getVendorContact',
        'vendor_invoice_date' => 'getVendorInvoiceDate',
        'vendor_invoice_number' => 'getVendorInvoiceNumber',
        'vendor_order_number' => 'getVendorOrderNumber',
        'vendor_site' => 'getVendorSite',
        'warehouse' => 'getWarehouse'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['cancel_reason'] = isset($data['cancel_reason']) ? $data['cancel_reason'] : null;
        $this->container['closed_flag'] = isset($data['closed_flag']) ? $data['closed_flag'] : null;
        $this->container['customer_city'] = isset($data['customer_city']) ? $data['customer_city'] : null;
        $this->container['customer_company'] = isset($data['customer_company']) ? $data['customer_company'] : null;
        $this->container['customer_contact'] = isset($data['customer_contact']) ? $data['customer_contact'] : null;
        $this->container['customer_country'] = isset($data['customer_country']) ? $data['customer_country'] : null;
        $this->container['customer_extension'] = isset($data['customer_extension']) ? $data['customer_extension'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['customer_phone'] = isset($data['customer_phone']) ? $data['customer_phone'] : null;
        $this->container['customer_site'] = isset($data['customer_site']) ? $data['customer_site'] : null;
        $this->container['customer_site_name'] = isset($data['customer_site_name']) ? $data['customer_site_name'] : null;
        $this->container['customer_state'] = isset($data['customer_state']) ? $data['customer_state'] : null;
        $this->container['customer_street_line1'] = isset($data['customer_street_line1']) ? $data['customer_street_line1'] : null;
        $this->container['customer_street_line2'] = isset($data['customer_street_line2']) ? $data['customer_street_line2'] : null;
        $this->container['customer_zip'] = isset($data['customer_zip']) ? $data['customer_zip'] : null;
        $this->container['date_closed'] = isset($data['date_closed']) ? $data['date_closed'] : null;
        $this->container['drop_ship_customer_flag'] = isset($data['drop_ship_customer_flag']) ? $data['drop_ship_customer_flag'] : null;
        $this->container['entered_by'] = isset($data['entered_by']) ? $data['entered_by'] : null;
        $this->container['freight_cost'] = isset($data['freight_cost']) ? $data['freight_cost'] : null;
        $this->container['freight_packing_slip'] = isset($data['freight_packing_slip']) ? $data['freight_packing_slip'] : null;
        $this->container['freight_tax_total'] = isset($data['freight_tax_total']) ? $data['freight_tax_total'] : null;
        $this->container['internal_notes'] = isset($data['internal_notes']) ? $data['internal_notes'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['po_date'] = isset($data['po_date']) ? $data['po_date'] : null;
        $this->container['po_number'] = isset($data['po_number']) ? $data['po_number'] : null;
        $this->container['sales_tax'] = isset($data['sales_tax']) ? $data['sales_tax'] : null;
        $this->container['shipment_date'] = isset($data['shipment_date']) ? $data['shipment_date'] : null;
        $this->container['shipment_method'] = isset($data['shipment_method']) ? $data['shipment_method'] : null;
        $this->container['shipping_instructions'] = isset($data['shipping_instructions']) ? $data['shipping_instructions'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sub_total'] = isset($data['sub_total']) ? $data['sub_total'] : null;
        $this->container['tax_code'] = isset($data['tax_code']) ? $data['tax_code'] : null;
        $this->container['tax_freight_flag'] = isset($data['tax_freight_flag']) ? $data['tax_freight_flag'] : null;
        $this->container['tax_po_flag'] = isset($data['tax_po_flag']) ? $data['tax_po_flag'] : null;
        $this->container['terms'] = isset($data['terms']) ? $data['terms'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['tracking_number'] = isset($data['tracking_number']) ? $data['tracking_number'] : null;
        $this->container['update_shipment_info'] = isset($data['update_shipment_info']) ? $data['update_shipment_info'] : null;
        $this->container['update_vendor_order_number'] = isset($data['update_vendor_order_number']) ? $data['update_vendor_order_number'] : null;
        $this->container['vendor_company'] = isset($data['vendor_company']) ? $data['vendor_company'] : null;
        $this->container['vendor_contact'] = isset($data['vendor_contact']) ? $data['vendor_contact'] : null;
        $this->container['vendor_invoice_date'] = isset($data['vendor_invoice_date']) ? $data['vendor_invoice_date'] : null;
        $this->container['vendor_invoice_number'] = isset($data['vendor_invoice_number']) ? $data['vendor_invoice_number'] : null;
        $this->container['vendor_order_number'] = isset($data['vendor_order_number']) ? $data['vendor_order_number'] : null;
        $this->container['vendor_site'] = isset($data['vendor_site']) ? $data['vendor_site'] : null;
        $this->container['warehouse'] = isset($data['warehouse']) ? $data['warehouse'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['location_id'] === null) {
            $invalid_properties[] = "'location_id' can't be null";
        }
        if (!is_null($this->container['po_number']) && (strlen($this->container['po_number']) > 50)) {
            $invalid_properties[] = "invalid value for 'po_number', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['terms'] === null) {
            $invalid_properties[] = "'terms' can't be null";
        }
        if (!is_null($this->container['tracking_number']) && (strlen($this->container['tracking_number']) > 50)) {
            $invalid_properties[] = "invalid value for 'tracking_number', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['vendor_company'] === null) {
            $invalid_properties[] = "'vendor_company' can't be null";
        }
        if (!is_null($this->container['vendor_invoice_number']) && (strlen($this->container['vendor_invoice_number']) > 50)) {
            $invalid_properties[] = "invalid value for 'vendor_invoice_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['vendor_order_number']) && (strlen($this->container['vendor_order_number']) > 50)) {
            $invalid_properties[] = "invalid value for 'vendor_order_number', the character length must be smaller than or equal to 50.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['location_id'] === null) {
            return false;
        }
        if (strlen($this->container['po_number']) > 50) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['terms'] === null) {
            return false;
        }
        if (strlen($this->container['tracking_number']) > 50) {
            return false;
        }
        if ($this->container['vendor_company'] === null) {
            return false;
        }
        if (strlen($this->container['vendor_invoice_number']) > 50) {
            return false;
        }
        if (strlen($this->container['vendor_order_number']) > 50) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }

    /**
     * Gets business_unit_id
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     * @param int $business_unit_id
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets cancel_reason
     * @return string
     */
    public function getCancelReason()
    {
        return $this->container['cancel_reason'];
    }

    /**
     * Sets cancel_reason
     * @param string $cancel_reason
     * @return $this
     */
    public function setCancelReason($cancel_reason)
    {
        $this->container['cancel_reason'] = $cancel_reason;

        return $this;
    }

    /**
     * Gets closed_flag
     * @return bool
     */
    public function getClosedFlag()
    {
        return $this->container['closed_flag'];
    }

    /**
     * Sets closed_flag
     * @param bool $closed_flag
     * @return $this
     */
    public function setClosedFlag($closed_flag)
    {
        $this->container['closed_flag'] = $closed_flag;

        return $this;
    }

    /**
     * Gets customer_city
     * @return string
     */
    public function getCustomerCity()
    {
        return $this->container['customer_city'];
    }

    /**
     * Sets customer_city
     * @param string $customer_city
     * @return $this
     */
    public function setCustomerCity($customer_city)
    {
        $this->container['customer_city'] = $customer_city;

        return $this;
    }

    /**
     * Gets customer_company
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\CompanyReference
     */
    public function getCustomerCompany()
    {
        return $this->container['customer_company'];
    }

    /**
     * Sets customer_company
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\CompanyReference $customer_company
     * @return $this
     */
    public function setCustomerCompany($customer_company)
    {
        $this->container['customer_company'] = $customer_company;

        return $this;
    }

    /**
     * Gets customer_contact
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\ContactReference
     */
    public function getCustomerContact()
    {
        return $this->container['customer_contact'];
    }

    /**
     * Sets customer_contact
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\ContactReference $customer_contact
     * @return $this
     */
    public function setCustomerContact($customer_contact)
    {
        $this->container['customer_contact'] = $customer_contact;

        return $this;
    }

    /**
     * Gets customer_country
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\CountryReference
     */
    public function getCustomerCountry()
    {
        return $this->container['customer_country'];
    }

    /**
     * Sets customer_country
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\CountryReference $customer_country
     * @return $this
     */
    public function setCustomerCountry($customer_country)
    {
        $this->container['customer_country'] = $customer_country;

        return $this;
    }

    /**
     * Gets customer_extension
     * @return string
     */
    public function getCustomerExtension()
    {
        return $this->container['customer_extension'];
    }

    /**
     * Sets customer_extension
     * @param string $customer_extension
     * @return $this
     */
    public function setCustomerExtension($customer_extension)
    {
        $this->container['customer_extension'] = $customer_extension;

        return $this;
    }

    /**
     * Gets customer_name
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     * @param string $customer_name
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets customer_phone
     * @return string
     */
    public function getCustomerPhone()
    {
        return $this->container['customer_phone'];
    }

    /**
     * Sets customer_phone
     * @param string $customer_phone
     * @return $this
     */
    public function setCustomerPhone($customer_phone)
    {
        $this->container['customer_phone'] = $customer_phone;

        return $this;
    }

    /**
     * Gets customer_site
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\SiteReference
     */
    public function getCustomerSite()
    {
        return $this->container['customer_site'];
    }

    /**
     * Sets customer_site
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\SiteReference $customer_site
     * @return $this
     */
    public function setCustomerSite($customer_site)
    {
        $this->container['customer_site'] = $customer_site;

        return $this;
    }

    /**
     * Gets customer_site_name
     * @return string
     */
    public function getCustomerSiteName()
    {
        return $this->container['customer_site_name'];
    }

    /**
     * Sets customer_site_name
     * @param string $customer_site_name
     * @return $this
     */
    public function setCustomerSiteName($customer_site_name)
    {
        $this->container['customer_site_name'] = $customer_site_name;

        return $this;
    }

    /**
     * Gets customer_state
     * @return string
     */
    public function getCustomerState()
    {
        return $this->container['customer_state'];
    }

    /**
     * Sets customer_state
     * @param string $customer_state
     * @return $this
     */
    public function setCustomerState($customer_state)
    {
        $this->container['customer_state'] = $customer_state;

        return $this;
    }

    /**
     * Gets customer_street_line1
     * @return string
     */
    public function getCustomerStreetLine1()
    {
        return $this->container['customer_street_line1'];
    }

    /**
     * Sets customer_street_line1
     * @param string $customer_street_line1
     * @return $this
     */
    public function setCustomerStreetLine1($customer_street_line1)
    {
        $this->container['customer_street_line1'] = $customer_street_line1;

        return $this;
    }

    /**
     * Gets customer_street_line2
     * @return string
     */
    public function getCustomerStreetLine2()
    {
        return $this->container['customer_street_line2'];
    }

    /**
     * Sets customer_street_line2
     * @param string $customer_street_line2
     * @return $this
     */
    public function setCustomerStreetLine2($customer_street_line2)
    {
        $this->container['customer_street_line2'] = $customer_street_line2;

        return $this;
    }

    /**
     * Gets customer_zip
     * @return string
     */
    public function getCustomerZip()
    {
        return $this->container['customer_zip'];
    }

    /**
     * Sets customer_zip
     * @param string $customer_zip
     * @return $this
     */
    public function setCustomerZip($customer_zip)
    {
        $this->container['customer_zip'] = $customer_zip;

        return $this;
    }

    /**
     * Gets date_closed
     * @return \DateTime
     */
    public function getDateClosed()
    {
        return $this->container['date_closed'];
    }

    /**
     * Sets date_closed
     * @param \DateTime $date_closed
     * @return $this
     */
    public function setDateClosed($date_closed)
    {
        $this->container['date_closed'] = $date_closed;

        return $this;
    }

    /**
     * Gets drop_ship_customer_flag
     * @return bool
     */
    public function getDropShipCustomerFlag()
    {
        return $this->container['drop_ship_customer_flag'];
    }

    /**
     * Sets drop_ship_customer_flag
     * @param bool $drop_ship_customer_flag
     * @return $this
     */
    public function setDropShipCustomerFlag($drop_ship_customer_flag)
    {
        $this->container['drop_ship_customer_flag'] = $drop_ship_customer_flag;

        return $this;
    }

    /**
     * Gets entered_by
     * @return string
     */
    public function getEnteredBy()
    {
        return $this->container['entered_by'];
    }

    /**
     * Sets entered_by
     * @param string $entered_by
     * @return $this
     */
    public function setEnteredBy($entered_by)
    {
        $this->container['entered_by'] = $entered_by;

        return $this;
    }

    /**
     * Gets freight_cost
     * @return double
     */
    public function getFreightCost()
    {
        return $this->container['freight_cost'];
    }

    /**
     * Sets freight_cost
     * @param double $freight_cost
     * @return $this
     */
    public function setFreightCost($freight_cost)
    {
        $this->container['freight_cost'] = $freight_cost;

        return $this;
    }

    /**
     * Gets freight_packing_slip
     * @return string
     */
    public function getFreightPackingSlip()
    {
        return $this->container['freight_packing_slip'];
    }

    /**
     * Sets freight_packing_slip
     * @param string $freight_packing_slip
     * @return $this
     */
    public function setFreightPackingSlip($freight_packing_slip)
    {
        $this->container['freight_packing_slip'] = $freight_packing_slip;

        return $this;
    }

    /**
     * Gets freight_tax_total
     * @return double
     */
    public function getFreightTaxTotal()
    {
        return $this->container['freight_tax_total'];
    }

    /**
     * Sets freight_tax_total
     * @param double $freight_tax_total
     * @return $this
     */
    public function setFreightTaxTotal($freight_tax_total)
    {
        $this->container['freight_tax_total'] = $freight_tax_total;

        return $this;
    }

    /**
     * Gets internal_notes
     * @return string
     */
    public function getInternalNotes()
    {
        return $this->container['internal_notes'];
    }

    /**
     * Sets internal_notes
     * @param string $internal_notes
     * @return $this
     */
    public function setInternalNotes($internal_notes)
    {
        $this->container['internal_notes'] = $internal_notes;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets po_date
     * @return \DateTime
     */
    public function getPoDate()
    {
        return $this->container['po_date'];
    }

    /**
     * Sets po_date
     * @param \DateTime $po_date
     * @return $this
     */
    public function setPoDate($po_date)
    {
        $this->container['po_date'] = $po_date;

        return $this;
    }

    /**
     * Gets po_number
     * @return string
     */
    public function getPoNumber()
    {
        return $this->container['po_number'];
    }

    /**
     * Sets po_number
     * @param string $po_number
     * @return $this
     */
    public function setPoNumber($po_number)
    {
        if (!is_null($po_number) && (strlen($po_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $po_number when calling PurchaseOrder., must be smaller than or equal to 50.');
        }

        $this->container['po_number'] = $po_number;

        return $this;
    }

    /**
     * Gets sales_tax
     * @return double
     */
    public function getSalesTax()
    {
        return $this->container['sales_tax'];
    }

    /**
     * Sets sales_tax
     * @param double $sales_tax
     * @return $this
     */
    public function setSalesTax($sales_tax)
    {
        $this->container['sales_tax'] = $sales_tax;

        return $this;
    }

    /**
     * Gets shipment_date
     * @return \DateTime
     */
    public function getShipmentDate()
    {
        return $this->container['shipment_date'];
    }

    /**
     * Sets shipment_date
     * @param \DateTime $shipment_date
     * @return $this
     */
    public function setShipmentDate($shipment_date)
    {
        $this->container['shipment_date'] = $shipment_date;

        return $this;
    }

    /**
     * Gets shipment_method
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\ShipmentMethodReference
     */
    public function getShipmentMethod()
    {
        return $this->container['shipment_method'];
    }

    /**
     * Sets shipment_method
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\ShipmentMethodReference $shipment_method
     * @return $this
     */
    public function setShipmentMethod($shipment_method)
    {
        $this->container['shipment_method'] = $shipment_method;

        return $this;
    }

    /**
     * Gets shipping_instructions
     * @return string
     */
    public function getShippingInstructions()
    {
        return $this->container['shipping_instructions'];
    }

    /**
     * Sets shipping_instructions
     * @param string $shipping_instructions
     * @return $this
     */
    public function setShippingInstructions($shipping_instructions)
    {
        $this->container['shipping_instructions'] = $shipping_instructions;

        return $this;
    }

    /**
     * Gets status
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\PurchaseOrderStatusReference
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\PurchaseOrderStatusReference $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sub_total
     * @return double
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     * @param double $sub_total
     * @return $this
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets tax_code
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\TaxCodeReference
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\TaxCodeReference $tax_code
     * @return $this
     */
    public function setTaxCode($tax_code)
    {
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets tax_freight_flag
     * @return bool
     */
    public function getTaxFreightFlag()
    {
        return $this->container['tax_freight_flag'];
    }

    /**
     * Sets tax_freight_flag
     * @param bool $tax_freight_flag
     * @return $this
     */
    public function setTaxFreightFlag($tax_freight_flag)
    {
        $this->container['tax_freight_flag'] = $tax_freight_flag;

        return $this;
    }

    /**
     * Gets tax_po_flag
     * @return bool
     */
    public function getTaxPoFlag()
    {
        return $this->container['tax_po_flag'];
    }

    /**
     * Sets tax_po_flag
     * @param bool $tax_po_flag
     * @return $this
     */
    public function setTaxPoFlag($tax_po_flag)
    {
        $this->container['tax_po_flag'] = $tax_po_flag;

        return $this;
    }

    /**
     * Gets terms
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\BillingTermsReference
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\BillingTermsReference $terms
     * @return $this
     */
    public function setTerms($terms)
    {
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets total
     * @return double
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     * @param double $total
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets tracking_number
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     * @param string $tracking_number
     * @return $this
     */
    public function setTrackingNumber($tracking_number)
    {
        if (!is_null($tracking_number) && (strlen($tracking_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $tracking_number when calling PurchaseOrder., must be smaller than or equal to 50.');
        }

        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets update_shipment_info
     * @return bool
     */
    public function getUpdateShipmentInfo()
    {
        return $this->container['update_shipment_info'];
    }

    /**
     * Sets update_shipment_info
     * @param bool $update_shipment_info Determines whether or not to update all of the shipment info for each associated line item when new shipment info is passed in
     * @return $this
     */
    public function setUpdateShipmentInfo($update_shipment_info)
    {
        $this->container['update_shipment_info'] = $update_shipment_info;

        return $this;
    }

    /**
     * Gets update_vendor_order_number
     * @return bool
     */
    public function getUpdateVendorOrderNumber()
    {
        return $this->container['update_vendor_order_number'];
    }

    /**
     * Sets update_vendor_order_number
     * @param bool $update_vendor_order_number Determines whether or not to update vendor order number for each associated line item when new vendor order number is passed in
     * @return $this
     */
    public function setUpdateVendorOrderNumber($update_vendor_order_number)
    {
        $this->container['update_vendor_order_number'] = $update_vendor_order_number;

        return $this;
    }

    /**
     * Gets vendor_company
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\CompanyReference
     */
    public function getVendorCompany()
    {
        return $this->container['vendor_company'];
    }

    /**
     * Sets vendor_company
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\CompanyReference $vendor_company
     * @return $this
     */
    public function setVendorCompany($vendor_company)
    {
        $this->container['vendor_company'] = $vendor_company;

        return $this;
    }

    /**
     * Gets vendor_contact
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\ContactReference
     */
    public function getVendorContact()
    {
        return $this->container['vendor_contact'];
    }

    /**
     * Sets vendor_contact
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\ContactReference $vendor_contact
     * @return $this
     */
    public function setVendorContact($vendor_contact)
    {
        $this->container['vendor_contact'] = $vendor_contact;

        return $this;
    }

    /**
     * Gets vendor_invoice_date
     * @return \DateTime
     */
    public function getVendorInvoiceDate()
    {
        return $this->container['vendor_invoice_date'];
    }

    /**
     * Sets vendor_invoice_date
     * @param \DateTime $vendor_invoice_date
     * @return $this
     */
    public function setVendorInvoiceDate($vendor_invoice_date)
    {
        $this->container['vendor_invoice_date'] = $vendor_invoice_date;

        return $this;
    }

    /**
     * Gets vendor_invoice_number
     * @return string
     */
    public function getVendorInvoiceNumber()
    {
        return $this->container['vendor_invoice_number'];
    }

    /**
     * Sets vendor_invoice_number
     * @param string $vendor_invoice_number
     * @return $this
     */
    public function setVendorInvoiceNumber($vendor_invoice_number)
    {
        if (!is_null($vendor_invoice_number) && (strlen($vendor_invoice_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $vendor_invoice_number when calling PurchaseOrder., must be smaller than or equal to 50.');
        }

        $this->container['vendor_invoice_number'] = $vendor_invoice_number;

        return $this;
    }

    /**
     * Gets vendor_order_number
     * @return string
     */
    public function getVendorOrderNumber()
    {
        return $this->container['vendor_order_number'];
    }

    /**
     * Sets vendor_order_number
     * @param string $vendor_order_number
     * @return $this
     */
    public function setVendorOrderNumber($vendor_order_number)
    {
        if (!is_null($vendor_order_number) && (strlen($vendor_order_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $vendor_order_number when calling PurchaseOrder., must be smaller than or equal to 50.');
        }

        $this->container['vendor_order_number'] = $vendor_order_number;

        return $this;
    }

    /**
     * Gets vendor_site
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\SiteReference
     */
    public function getVendorSite()
    {
        return $this->container['vendor_site'];
    }

    /**
     * Sets vendor_site
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\SiteReference $vendor_site
     * @return $this
     */
    public function setVendorSite($vendor_site)
    {
        $this->container['vendor_site'] = $vendor_site;

        return $this;
    }

    /**
     * Gets warehouse
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\WarehouseReference
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\WarehouseReference $warehouse
     * @return $this
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Procurement\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Procurement\ObjectSerializer::sanitizeForSerialization($this));
    }
}


