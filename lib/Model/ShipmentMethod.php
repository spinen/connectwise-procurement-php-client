<?php
/**
 * ShipmentMethod
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Procurement
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Procurement API
 *
 * ConnectWise Procurement API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model;

use \ArrayAccess;

/**
 * ShipmentMethod Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Procurement
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ShipmentMethod implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ShipmentMethod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'default_flag' => 'bool',
        'tracking_url' => 'string',
        'shipping_type' => 'string',
        '_info' => '\Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'default_flag' => 'defaultFlag',
        'tracking_url' => 'trackingUrl',
        'shipping_type' => 'shippingType',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'default_flag' => 'setDefaultFlag',
        'tracking_url' => 'setTrackingUrl',
        'shipping_type' => 'setShippingType',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'default_flag' => 'getDefaultFlag',
        'tracking_url' => 'getTrackingUrl',
        'shipping_type' => 'getShippingType',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SHIPPING_TYPE_NONE = 'None';
    const SHIPPING_TYPE_FED_EX_TWO_DAY = 'FedExTwoDay';
    const SHIPPING_TYPE_FED_EX_PRIORITY = 'FedExPriority';
    const SHIPPING_TYPE_FED_EX_GROUND = 'FedExGround';
    const SHIPPING_TYPE_UPS_NEXT_DAY = 'UpsNextDay';
    const SHIPPING_TYPE_UPS_SECOND_DAY = 'UpsSecondDay';
    const SHIPPING_TYPE_UPS_GROUND = 'UpsGround';
    const SHIPPING_TYPE_COURIER_SERVICE = 'CourierService';
    const SHIPPING_TYPE_USPS_PRIORITY = 'UspsPriority';
    const SHIPPING_TYPE_USPS_EXPRESS = 'UspsExpress';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getShippingTypeAllowableValues()
    {
        return [
            self::SHIPPING_TYPE_NONE,
            self::SHIPPING_TYPE_FED_EX_TWO_DAY,
            self::SHIPPING_TYPE_FED_EX_PRIORITY,
            self::SHIPPING_TYPE_FED_EX_GROUND,
            self::SHIPPING_TYPE_UPS_NEXT_DAY,
            self::SHIPPING_TYPE_UPS_SECOND_DAY,
            self::SHIPPING_TYPE_UPS_GROUND,
            self::SHIPPING_TYPE_COURIER_SERVICE,
            self::SHIPPING_TYPE_USPS_PRIORITY,
            self::SHIPPING_TYPE_USPS_EXPRESS,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['default_flag'] = isset($data['default_flag']) ? $data['default_flag'] : null;
        $this->container['tracking_url'] = isset($data['tracking_url']) ? $data['tracking_url'] : null;
        $this->container['shipping_type'] = isset($data['shipping_type']) ? $data['shipping_type'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 50)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        $allowed_values = ["None", "FedExTwoDay", "FedExPriority", "FedExGround", "UpsNextDay", "UpsSecondDay", "UpsGround", "CourierService", "UspsPriority", "UspsExpress"];
        if (!in_array($this->container['shipping_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'shipping_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 50) {
            return false;
        }
        $allowed_values = ["None", "FedExTwoDay", "FedExPriority", "FedExGround", "UpsNextDay", "UpsSecondDay", "UpsGround", "CourierService", "UspsPriority", "UspsExpress"];
        if (!in_array($this->container['shipping_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ShipmentMethod., must be smaller than or equal to 50.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets default_flag
     * @return bool
     */
    public function getDefaultFlag()
    {
        return $this->container['default_flag'];
    }

    /**
     * Sets default_flag
     * @param bool $default_flag
     * @return $this
     */
    public function setDefaultFlag($default_flag)
    {
        $this->container['default_flag'] = $default_flag;

        return $this;
    }

    /**
     * Gets tracking_url
     * @return string
     */
    public function getTrackingUrl()
    {
        return $this->container['tracking_url'];
    }

    /**
     * Sets tracking_url
     * @param string $tracking_url
     * @return $this
     */
    public function setTrackingUrl($tracking_url)
    {
        $this->container['tracking_url'] = $tracking_url;

        return $this;
    }

    /**
     * Gets shipping_type
     * @return string
     */
    public function getShippingType()
    {
        return $this->container['shipping_type'];
    }

    /**
     * Sets shipping_type
     * @param string $shipping_type
     * @return $this
     */
    public function setShippingType($shipping_type)
    {
        $allowed_values = array('None', 'FedExTwoDay', 'FedExPriority', 'FedExGround', 'UpsNextDay', 'UpsSecondDay', 'UpsGround', 'CourierService', 'UspsPriority', 'UspsExpress');
        if (!is_null($shipping_type) && (!in_array($shipping_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'shipping_type', must be one of 'None', 'FedExTwoDay', 'FedExPriority', 'FedExGround', 'UpsNextDay', 'UpsSecondDay', 'UpsGround', 'CourierService', 'UspsPriority', 'UspsExpress'");
        }
        $this->container['shipping_type'] = $shipping_type;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Procurement\Spinen\ConnectWise\Clients\Procurement\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Procurement\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Procurement\ObjectSerializer::sanitizeForSerialization($this));
    }
}


