<?php
/**
 * ProductItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Procurement
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Procurement API
 *
 * ConnectWise Procurement API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Procurement\Model;

use \ArrayAccess;

/**
 * ProductItem Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Procurement
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ProductItem implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ProductItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'catalog_item' => '\Spinen\ConnectWise\Clients\Procurement\Model\CatalogItemReference',
        'charge_to_id' => 'int',
        'charge_to_type' => 'string',
        'description' => 'string',
        'sequence_number' => 'double',
        'quantity' => 'double',
        'price' => 'double',
        'cost' => 'double',
        'discount' => 'double',
        'price_method' => 'string',
        'billable_option' => 'string',
        'agreement' => '\Spinen\ConnectWise\Clients\Procurement\Model\AgreementReference',
        'location_id' => 'int',
        'business_unit_id' => 'int',
        'vendor' => '\Spinen\ConnectWise\Clients\Procurement\Model\CompanyReference',
        'vendor_sku' => 'string',
        'taxable_flag' => 'bool',
        'dropship_flag' => 'bool',
        'special_order_flag' => 'bool',
        'phase_product_flag' => 'bool',
        'cancelled_flag' => 'bool',
        'quantity_cancelled' => 'double',
        'cancelled_reason' => 'string',
        'customer_description' => 'string',
        'internal_notes' => 'string',
        'product_supplied_flag' => 'bool',
        'sub_contractor_ship_to_id' => 'int',
        'sub_contractor_amount_limit' => 'double',
        'recurring' => '\Spinen\ConnectWise\Clients\Procurement\Model\ProductRecurring',
        'sla' => '\Spinen\ConnectWise\Clients\Procurement\Model\SLAReference',
        'entity_type' => '\Spinen\ConnectWise\Clients\Procurement\Model\EntityTypeReference',
        'forecast_detail_id' => 'int',
        'cancelled_by' => 'int',
        'cancelled_date' => '\DateTime',
        'warehouse' => 'string',
        'warehouse_bin' => 'string',
        'purchase_date' => '\DateTime',
        'integration_x_ref' => 'string',
        'list_price' => 'double',
        'serial_number_ids' => 'int[]',
        'company' => '\Spinen\ConnectWise\Clients\Procurement\Model\CompanyReference',
        'forecast_status' => '\Spinen\ConnectWise\Clients\Procurement\Model\OpportunityStatusReference',
        '_info' => '\Spinen\ConnectWise\Clients\Procurement\Model\Metadata',
        'bypass_forecast_update' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'catalog_item' => 'catalogItem',
        'charge_to_id' => 'chargeToId',
        'charge_to_type' => 'chargeToType',
        'description' => 'description',
        'sequence_number' => 'sequenceNumber',
        'quantity' => 'quantity',
        'price' => 'price',
        'cost' => 'cost',
        'discount' => 'discount',
        'price_method' => 'priceMethod',
        'billable_option' => 'billableOption',
        'agreement' => 'agreement',
        'location_id' => 'locationId',
        'business_unit_id' => 'businessUnitId',
        'vendor' => 'vendor',
        'vendor_sku' => 'vendorSku',
        'taxable_flag' => 'taxableFlag',
        'dropship_flag' => 'dropshipFlag',
        'special_order_flag' => 'specialOrderFlag',
        'phase_product_flag' => 'phaseProductFlag',
        'cancelled_flag' => 'cancelledFlag',
        'quantity_cancelled' => 'quantityCancelled',
        'cancelled_reason' => 'cancelledReason',
        'customer_description' => 'customerDescription',
        'internal_notes' => 'internalNotes',
        'product_supplied_flag' => 'productSuppliedFlag',
        'sub_contractor_ship_to_id' => 'subContractorShipToId',
        'sub_contractor_amount_limit' => 'subContractorAmountLimit',
        'recurring' => 'recurring',
        'sla' => 'sla',
        'entity_type' => 'entityType',
        'forecast_detail_id' => 'forecastDetailId',
        'cancelled_by' => 'cancelledBy',
        'cancelled_date' => 'cancelledDate',
        'warehouse' => 'warehouse',
        'warehouse_bin' => 'warehouseBin',
        'purchase_date' => 'purchaseDate',
        'integration_x_ref' => 'integrationXRef',
        'list_price' => 'listPrice',
        'serial_number_ids' => 'serialNumberIds',
        'company' => 'company',
        'forecast_status' => 'forecastStatus',
        '_info' => '_info',
        'bypass_forecast_update' => 'bypassForecastUpdate'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'catalog_item' => 'setCatalogItem',
        'charge_to_id' => 'setChargeToId',
        'charge_to_type' => 'setChargeToType',
        'description' => 'setDescription',
        'sequence_number' => 'setSequenceNumber',
        'quantity' => 'setQuantity',
        'price' => 'setPrice',
        'cost' => 'setCost',
        'discount' => 'setDiscount',
        'price_method' => 'setPriceMethod',
        'billable_option' => 'setBillableOption',
        'agreement' => 'setAgreement',
        'location_id' => 'setLocationId',
        'business_unit_id' => 'setBusinessUnitId',
        'vendor' => 'setVendor',
        'vendor_sku' => 'setVendorSku',
        'taxable_flag' => 'setTaxableFlag',
        'dropship_flag' => 'setDropshipFlag',
        'special_order_flag' => 'setSpecialOrderFlag',
        'phase_product_flag' => 'setPhaseProductFlag',
        'cancelled_flag' => 'setCancelledFlag',
        'quantity_cancelled' => 'setQuantityCancelled',
        'cancelled_reason' => 'setCancelledReason',
        'customer_description' => 'setCustomerDescription',
        'internal_notes' => 'setInternalNotes',
        'product_supplied_flag' => 'setProductSuppliedFlag',
        'sub_contractor_ship_to_id' => 'setSubContractorShipToId',
        'sub_contractor_amount_limit' => 'setSubContractorAmountLimit',
        'recurring' => 'setRecurring',
        'sla' => 'setSla',
        'entity_type' => 'setEntityType',
        'forecast_detail_id' => 'setForecastDetailId',
        'cancelled_by' => 'setCancelledBy',
        'cancelled_date' => 'setCancelledDate',
        'warehouse' => 'setWarehouse',
        'warehouse_bin' => 'setWarehouseBin',
        'purchase_date' => 'setPurchaseDate',
        'integration_x_ref' => 'setIntegrationXRef',
        'list_price' => 'setListPrice',
        'serial_number_ids' => 'setSerialNumberIds',
        'company' => 'setCompany',
        'forecast_status' => 'setForecastStatus',
        '_info' => 'setInfo',
        'bypass_forecast_update' => 'setBypassForecastUpdate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'catalog_item' => 'getCatalogItem',
        'charge_to_id' => 'getChargeToId',
        'charge_to_type' => 'getChargeToType',
        'description' => 'getDescription',
        'sequence_number' => 'getSequenceNumber',
        'quantity' => 'getQuantity',
        'price' => 'getPrice',
        'cost' => 'getCost',
        'discount' => 'getDiscount',
        'price_method' => 'getPriceMethod',
        'billable_option' => 'getBillableOption',
        'agreement' => 'getAgreement',
        'location_id' => 'getLocationId',
        'business_unit_id' => 'getBusinessUnitId',
        'vendor' => 'getVendor',
        'vendor_sku' => 'getVendorSku',
        'taxable_flag' => 'getTaxableFlag',
        'dropship_flag' => 'getDropshipFlag',
        'special_order_flag' => 'getSpecialOrderFlag',
        'phase_product_flag' => 'getPhaseProductFlag',
        'cancelled_flag' => 'getCancelledFlag',
        'quantity_cancelled' => 'getQuantityCancelled',
        'cancelled_reason' => 'getCancelledReason',
        'customer_description' => 'getCustomerDescription',
        'internal_notes' => 'getInternalNotes',
        'product_supplied_flag' => 'getProductSuppliedFlag',
        'sub_contractor_ship_to_id' => 'getSubContractorShipToId',
        'sub_contractor_amount_limit' => 'getSubContractorAmountLimit',
        'recurring' => 'getRecurring',
        'sla' => 'getSla',
        'entity_type' => 'getEntityType',
        'forecast_detail_id' => 'getForecastDetailId',
        'cancelled_by' => 'getCancelledBy',
        'cancelled_date' => 'getCancelledDate',
        'warehouse' => 'getWarehouse',
        'warehouse_bin' => 'getWarehouseBin',
        'purchase_date' => 'getPurchaseDate',
        'integration_x_ref' => 'getIntegrationXRef',
        'list_price' => 'getListPrice',
        'serial_number_ids' => 'getSerialNumberIds',
        'company' => 'getCompany',
        'forecast_status' => 'getForecastStatus',
        '_info' => 'getInfo',
        'bypass_forecast_update' => 'getBypassForecastUpdate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CHARGE_TO_TYPE_TICKET = 'Ticket';
    const CHARGE_TO_TYPE_PROJECT = 'Project';
    const CHARGE_TO_TYPE_INVOICE = 'Invoice';
    const CHARGE_TO_TYPE_OPPORTUNITY = 'Opportunity';
    const CHARGE_TO_TYPE_SALES_ORDER = 'SalesOrder';
    const PRICE_METHOD_FLAT_RATE_FOR_RANGE = 'FlatRateForRange';
    const PRICE_METHOD_PERCENT_MARKUP_FROM_COST = 'PercentMarkupFromCost';
    const PRICE_METHOD_PERCENT_MARKDOWN_FROM_PRICE = 'PercentMarkdownFromPrice';
    const PRICE_METHOD_PRICE_PER_UNIT = 'PricePerUnit';
    const BILLABLE_OPTION_BILLABLE = 'Billable';
    const BILLABLE_OPTION_DO_NOT_BILL = 'DoNotBill';
    const BILLABLE_OPTION_NO_CHARGE = 'NoCharge';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getChargeToTypeAllowableValues()
    {
        return [
            self::CHARGE_TO_TYPE_TICKET,
            self::CHARGE_TO_TYPE_PROJECT,
            self::CHARGE_TO_TYPE_INVOICE,
            self::CHARGE_TO_TYPE_OPPORTUNITY,
            self::CHARGE_TO_TYPE_SALES_ORDER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPriceMethodAllowableValues()
    {
        return [
            self::PRICE_METHOD_FLAT_RATE_FOR_RANGE,
            self::PRICE_METHOD_PERCENT_MARKUP_FROM_COST,
            self::PRICE_METHOD_PERCENT_MARKDOWN_FROM_PRICE,
            self::PRICE_METHOD_PRICE_PER_UNIT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillableOptionAllowableValues()
    {
        return [
            self::BILLABLE_OPTION_BILLABLE,
            self::BILLABLE_OPTION_DO_NOT_BILL,
            self::BILLABLE_OPTION_NO_CHARGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['catalog_item'] = isset($data['catalog_item']) ? $data['catalog_item'] : null;
        $this->container['charge_to_id'] = isset($data['charge_to_id']) ? $data['charge_to_id'] : null;
        $this->container['charge_to_type'] = isset($data['charge_to_type']) ? $data['charge_to_type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['sequence_number'] = isset($data['sequence_number']) ? $data['sequence_number'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['price_method'] = isset($data['price_method']) ? $data['price_method'] : null;
        $this->container['billable_option'] = isset($data['billable_option']) ? $data['billable_option'] : null;
        $this->container['agreement'] = isset($data['agreement']) ? $data['agreement'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
        $this->container['vendor_sku'] = isset($data['vendor_sku']) ? $data['vendor_sku'] : null;
        $this->container['taxable_flag'] = isset($data['taxable_flag']) ? $data['taxable_flag'] : null;
        $this->container['dropship_flag'] = isset($data['dropship_flag']) ? $data['dropship_flag'] : null;
        $this->container['special_order_flag'] = isset($data['special_order_flag']) ? $data['special_order_flag'] : null;
        $this->container['phase_product_flag'] = isset($data['phase_product_flag']) ? $data['phase_product_flag'] : null;
        $this->container['cancelled_flag'] = isset($data['cancelled_flag']) ? $data['cancelled_flag'] : null;
        $this->container['quantity_cancelled'] = isset($data['quantity_cancelled']) ? $data['quantity_cancelled'] : null;
        $this->container['cancelled_reason'] = isset($data['cancelled_reason']) ? $data['cancelled_reason'] : null;
        $this->container['customer_description'] = isset($data['customer_description']) ? $data['customer_description'] : null;
        $this->container['internal_notes'] = isset($data['internal_notes']) ? $data['internal_notes'] : null;
        $this->container['product_supplied_flag'] = isset($data['product_supplied_flag']) ? $data['product_supplied_flag'] : null;
        $this->container['sub_contractor_ship_to_id'] = isset($data['sub_contractor_ship_to_id']) ? $data['sub_contractor_ship_to_id'] : null;
        $this->container['sub_contractor_amount_limit'] = isset($data['sub_contractor_amount_limit']) ? $data['sub_contractor_amount_limit'] : null;
        $this->container['recurring'] = isset($data['recurring']) ? $data['recurring'] : null;
        $this->container['sla'] = isset($data['sla']) ? $data['sla'] : null;
        $this->container['entity_type'] = isset($data['entity_type']) ? $data['entity_type'] : null;
        $this->container['forecast_detail_id'] = isset($data['forecast_detail_id']) ? $data['forecast_detail_id'] : null;
        $this->container['cancelled_by'] = isset($data['cancelled_by']) ? $data['cancelled_by'] : null;
        $this->container['cancelled_date'] = isset($data['cancelled_date']) ? $data['cancelled_date'] : null;
        $this->container['warehouse'] = isset($data['warehouse']) ? $data['warehouse'] : null;
        $this->container['warehouse_bin'] = isset($data['warehouse_bin']) ? $data['warehouse_bin'] : null;
        $this->container['purchase_date'] = isset($data['purchase_date']) ? $data['purchase_date'] : null;
        $this->container['integration_x_ref'] = isset($data['integration_x_ref']) ? $data['integration_x_ref'] : null;
        $this->container['list_price'] = isset($data['list_price']) ? $data['list_price'] : null;
        $this->container['serial_number_ids'] = isset($data['serial_number_ids']) ? $data['serial_number_ids'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['forecast_status'] = isset($data['forecast_status']) ? $data['forecast_status'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
        $this->container['bypass_forecast_update'] = isset($data['bypass_forecast_update']) ? $data['bypass_forecast_update'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['catalog_item'] === null) {
            $invalid_properties[] = "'catalog_item' can't be null";
        }
        if ($this->container['charge_to_id'] === null) {
            $invalid_properties[] = "'charge_to_id' can't be null";
        }
        if ($this->container['charge_to_type'] === null) {
            $invalid_properties[] = "'charge_to_type' can't be null";
        }
        $allowed_values = ["Ticket", "Project", "Invoice", "Opportunity", "SalesOrder"];
        if (!in_array($this->container['charge_to_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'charge_to_type', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['description']) && (strlen($this->container['description']) > 2000)) {
            $invalid_properties[] = "invalid value for 'description', the character length must be smaller than or equal to 2000.";
        }

        $allowed_values = ["FlatRateForRange", "PercentMarkupFromCost", "PercentMarkdownFromPrice", "PricePerUnit"];
        if (!in_array($this->container['price_method'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'price_method', must be one of #{allowed_values}.";
        }

        if ($this->container['billable_option'] === null) {
            $invalid_properties[] = "'billable_option' can't be null";
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge"];
        if (!in_array($this->container['billable_option'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'billable_option', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['vendor_sku']) && (strlen($this->container['vendor_sku']) > 50)) {
            $invalid_properties[] = "invalid value for 'vendor_sku', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['cancelled_reason']) && (strlen($this->container['cancelled_reason']) > 100)) {
            $invalid_properties[] = "invalid value for 'cancelled_reason', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['customer_description']) && (strlen($this->container['customer_description']) > 6000)) {
            $invalid_properties[] = "invalid value for 'customer_description', the character length must be smaller than or equal to 6000.";
        }

        if (!is_null($this->container['internal_notes']) && (strlen($this->container['internal_notes']) > 1000)) {
            $invalid_properties[] = "invalid value for 'internal_notes', the character length must be smaller than or equal to 1000.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['catalog_item'] === null) {
            return false;
        }
        if ($this->container['charge_to_id'] === null) {
            return false;
        }
        if ($this->container['charge_to_type'] === null) {
            return false;
        }
        $allowed_values = ["Ticket", "Project", "Invoice", "Opportunity", "SalesOrder"];
        if (!in_array($this->container['charge_to_type'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['description']) > 2000) {
            return false;
        }
        $allowed_values = ["FlatRateForRange", "PercentMarkupFromCost", "PercentMarkdownFromPrice", "PricePerUnit"];
        if (!in_array($this->container['price_method'], $allowed_values)) {
            return false;
        }
        if ($this->container['billable_option'] === null) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge"];
        if (!in_array($this->container['billable_option'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['vendor_sku']) > 50) {
            return false;
        }
        if (strlen($this->container['cancelled_reason']) > 100) {
            return false;
        }
        if (strlen($this->container['customer_description']) > 6000) {
            return false;
        }
        if (strlen($this->container['internal_notes']) > 1000) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets catalog_item
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\CatalogItemReference
     */
    public function getCatalogItem()
    {
        return $this->container['catalog_item'];
    }

    /**
     * Sets catalog_item
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\CatalogItemReference $catalog_item
     * @return $this
     */
    public function setCatalogItem($catalog_item)
    {
        $this->container['catalog_item'] = $catalog_item;

        return $this;
    }

    /**
     * Gets charge_to_id
     * @return int
     */
    public function getChargeToId()
    {
        return $this->container['charge_to_id'];
    }

    /**
     * Sets charge_to_id
     * @param int $charge_to_id
     * @return $this
     */
    public function setChargeToId($charge_to_id)
    {
        $this->container['charge_to_id'] = $charge_to_id;

        return $this;
    }

    /**
     * Gets charge_to_type
     * @return string
     */
    public function getChargeToType()
    {
        return $this->container['charge_to_type'];
    }

    /**
     * Sets charge_to_type
     * @param string $charge_to_type
     * @return $this
     */
    public function setChargeToType($charge_to_type)
    {
        $allowed_values = array('Ticket', 'Project', 'Invoice', 'Opportunity', 'SalesOrder');
        if ((!in_array($charge_to_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'charge_to_type', must be one of 'Ticket', 'Project', 'Invoice', 'Opportunity', 'SalesOrder'");
        }
        $this->container['charge_to_type'] = $charge_to_type;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (strlen($description) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ProductItem., must be smaller than or equal to 2000.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets sequence_number
     * @return double
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     * @param double $sequence_number
     * @return $this
     */
    public function setSequenceNumber($sequence_number)
    {
        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets quantity
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param double $quantity
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets price
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param double $price
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets cost
     * @return double
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     * @param double $cost
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets discount
     * @return double
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     * @param double $discount
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets price_method
     * @return string
     */
    public function getPriceMethod()
    {
        return $this->container['price_method'];
    }

    /**
     * Sets price_method
     * @param string $price_method
     * @return $this
     */
    public function setPriceMethod($price_method)
    {
        $allowed_values = array('FlatRateForRange', 'PercentMarkupFromCost', 'PercentMarkdownFromPrice', 'PricePerUnit');
        if (!is_null($price_method) && (!in_array($price_method, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'price_method', must be one of 'FlatRateForRange', 'PercentMarkupFromCost', 'PercentMarkdownFromPrice', 'PricePerUnit'");
        }
        $this->container['price_method'] = $price_method;

        return $this;
    }

    /**
     * Gets billable_option
     * @return string
     */
    public function getBillableOption()
    {
        return $this->container['billable_option'];
    }

    /**
     * Sets billable_option
     * @param string $billable_option
     * @return $this
     */
    public function setBillableOption($billable_option)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge');
        if ((!in_array($billable_option, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'billable_option', must be one of 'Billable', 'DoNotBill', 'NoCharge'");
        }
        $this->container['billable_option'] = $billable_option;

        return $this;
    }

    /**
     * Gets agreement
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\AgreementReference
     */
    public function getAgreement()
    {
        return $this->container['agreement'];
    }

    /**
     * Sets agreement
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\AgreementReference $agreement
     * @return $this
     */
    public function setAgreement($agreement)
    {
        $this->container['agreement'] = $agreement;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets business_unit_id
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     * @param int $business_unit_id
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets vendor
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\CompanyReference
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\CompanyReference $vendor
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets vendor_sku
     * @return string
     */
    public function getVendorSku()
    {
        return $this->container['vendor_sku'];
    }

    /**
     * Sets vendor_sku
     * @param string $vendor_sku
     * @return $this
     */
    public function setVendorSku($vendor_sku)
    {
        if (!is_null($vendor_sku) && (strlen($vendor_sku) > 50)) {
            throw new \InvalidArgumentException('invalid length for $vendor_sku when calling ProductItem., must be smaller than or equal to 50.');
        }

        $this->container['vendor_sku'] = $vendor_sku;

        return $this;
    }

    /**
     * Gets taxable_flag
     * @return bool
     */
    public function getTaxableFlag()
    {
        return $this->container['taxable_flag'];
    }

    /**
     * Sets taxable_flag
     * @param bool $taxable_flag
     * @return $this
     */
    public function setTaxableFlag($taxable_flag)
    {
        $this->container['taxable_flag'] = $taxable_flag;

        return $this;
    }

    /**
     * Gets dropship_flag
     * @return bool
     */
    public function getDropshipFlag()
    {
        return $this->container['dropship_flag'];
    }

    /**
     * Sets dropship_flag
     * @param bool $dropship_flag
     * @return $this
     */
    public function setDropshipFlag($dropship_flag)
    {
        $this->container['dropship_flag'] = $dropship_flag;

        return $this;
    }

    /**
     * Gets special_order_flag
     * @return bool
     */
    public function getSpecialOrderFlag()
    {
        return $this->container['special_order_flag'];
    }

    /**
     * Sets special_order_flag
     * @param bool $special_order_flag
     * @return $this
     */
    public function setSpecialOrderFlag($special_order_flag)
    {
        $this->container['special_order_flag'] = $special_order_flag;

        return $this;
    }

    /**
     * Gets phase_product_flag
     * @return bool
     */
    public function getPhaseProductFlag()
    {
        return $this->container['phase_product_flag'];
    }

    /**
     * Sets phase_product_flag
     * @param bool $phase_product_flag
     * @return $this
     */
    public function setPhaseProductFlag($phase_product_flag)
    {
        $this->container['phase_product_flag'] = $phase_product_flag;

        return $this;
    }

    /**
     * Gets cancelled_flag
     * @return bool
     */
    public function getCancelledFlag()
    {
        return $this->container['cancelled_flag'];
    }

    /**
     * Sets cancelled_flag
     * @param bool $cancelled_flag
     * @return $this
     */
    public function setCancelledFlag($cancelled_flag)
    {
        $this->container['cancelled_flag'] = $cancelled_flag;

        return $this;
    }

    /**
     * Gets quantity_cancelled
     * @return double
     */
    public function getQuantityCancelled()
    {
        return $this->container['quantity_cancelled'];
    }

    /**
     * Sets quantity_cancelled
     * @param double $quantity_cancelled
     * @return $this
     */
    public function setQuantityCancelled($quantity_cancelled)
    {
        $this->container['quantity_cancelled'] = $quantity_cancelled;

        return $this;
    }

    /**
     * Gets cancelled_reason
     * @return string
     */
    public function getCancelledReason()
    {
        return $this->container['cancelled_reason'];
    }

    /**
     * Sets cancelled_reason
     * @param string $cancelled_reason
     * @return $this
     */
    public function setCancelledReason($cancelled_reason)
    {
        if (!is_null($cancelled_reason) && (strlen($cancelled_reason) > 100)) {
            throw new \InvalidArgumentException('invalid length for $cancelled_reason when calling ProductItem., must be smaller than or equal to 100.');
        }

        $this->container['cancelled_reason'] = $cancelled_reason;

        return $this;
    }

    /**
     * Gets customer_description
     * @return string
     */
    public function getCustomerDescription()
    {
        return $this->container['customer_description'];
    }

    /**
     * Sets customer_description
     * @param string $customer_description
     * @return $this
     */
    public function setCustomerDescription($customer_description)
    {
        if (!is_null($customer_description) && (strlen($customer_description) > 6000)) {
            throw new \InvalidArgumentException('invalid length for $customer_description when calling ProductItem., must be smaller than or equal to 6000.');
        }

        $this->container['customer_description'] = $customer_description;

        return $this;
    }

    /**
     * Gets internal_notes
     * @return string
     */
    public function getInternalNotes()
    {
        return $this->container['internal_notes'];
    }

    /**
     * Sets internal_notes
     * @param string $internal_notes
     * @return $this
     */
    public function setInternalNotes($internal_notes)
    {
        if (!is_null($internal_notes) && (strlen($internal_notes) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $internal_notes when calling ProductItem., must be smaller than or equal to 1000.');
        }

        $this->container['internal_notes'] = $internal_notes;

        return $this;
    }

    /**
     * Gets product_supplied_flag
     * @return bool
     */
    public function getProductSuppliedFlag()
    {
        return $this->container['product_supplied_flag'];
    }

    /**
     * Sets product_supplied_flag
     * @param bool $product_supplied_flag
     * @return $this
     */
    public function setProductSuppliedFlag($product_supplied_flag)
    {
        $this->container['product_supplied_flag'] = $product_supplied_flag;

        return $this;
    }

    /**
     * Gets sub_contractor_ship_to_id
     * @return int
     */
    public function getSubContractorShipToId()
    {
        return $this->container['sub_contractor_ship_to_id'];
    }

    /**
     * Sets sub_contractor_ship_to_id
     * @param int $sub_contractor_ship_to_id
     * @return $this
     */
    public function setSubContractorShipToId($sub_contractor_ship_to_id)
    {
        $this->container['sub_contractor_ship_to_id'] = $sub_contractor_ship_to_id;

        return $this;
    }

    /**
     * Gets sub_contractor_amount_limit
     * @return double
     */
    public function getSubContractorAmountLimit()
    {
        return $this->container['sub_contractor_amount_limit'];
    }

    /**
     * Sets sub_contractor_amount_limit
     * @param double $sub_contractor_amount_limit
     * @return $this
     */
    public function setSubContractorAmountLimit($sub_contractor_amount_limit)
    {
        $this->container['sub_contractor_amount_limit'] = $sub_contractor_amount_limit;

        return $this;
    }

    /**
     * Gets recurring
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\ProductRecurring
     */
    public function getRecurring()
    {
        return $this->container['recurring'];
    }

    /**
     * Sets recurring
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\ProductRecurring $recurring
     * @return $this
     */
    public function setRecurring($recurring)
    {
        $this->container['recurring'] = $recurring;

        return $this;
    }

    /**
     * Gets sla
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\SLAReference
     */
    public function getSla()
    {
        return $this->container['sla'];
    }

    /**
     * Sets sla
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\SLAReference $sla
     * @return $this
     */
    public function setSla($sla)
    {
        $this->container['sla'] = $sla;

        return $this;
    }

    /**
     * Gets entity_type
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\EntityTypeReference
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\EntityTypeReference $entity_type
     * @return $this
     */
    public function setEntityType($entity_type)
    {
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets forecast_detail_id
     * @return int
     */
    public function getForecastDetailId()
    {
        return $this->container['forecast_detail_id'];
    }

    /**
     * Sets forecast_detail_id
     * @param int $forecast_detail_id
     * @return $this
     */
    public function setForecastDetailId($forecast_detail_id)
    {
        $this->container['forecast_detail_id'] = $forecast_detail_id;

        return $this;
    }

    /**
     * Gets cancelled_by
     * @return int
     */
    public function getCancelledBy()
    {
        return $this->container['cancelled_by'];
    }

    /**
     * Sets cancelled_by
     * @param int $cancelled_by
     * @return $this
     */
    public function setCancelledBy($cancelled_by)
    {
        $this->container['cancelled_by'] = $cancelled_by;

        return $this;
    }

    /**
     * Gets cancelled_date
     * @return \DateTime
     */
    public function getCancelledDate()
    {
        return $this->container['cancelled_date'];
    }

    /**
     * Sets cancelled_date
     * @param \DateTime $cancelled_date
     * @return $this
     */
    public function setCancelledDate($cancelled_date)
    {
        $this->container['cancelled_date'] = $cancelled_date;

        return $this;
    }

    /**
     * Gets warehouse
     * @return string
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     * @param string $warehouse
     * @return $this
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets warehouse_bin
     * @return string
     */
    public function getWarehouseBin()
    {
        return $this->container['warehouse_bin'];
    }

    /**
     * Sets warehouse_bin
     * @param string $warehouse_bin
     * @return $this
     */
    public function setWarehouseBin($warehouse_bin)
    {
        $this->container['warehouse_bin'] = $warehouse_bin;

        return $this;
    }

    /**
     * Gets purchase_date
     * @return \DateTime
     */
    public function getPurchaseDate()
    {
        return $this->container['purchase_date'];
    }

    /**
     * Sets purchase_date
     * @param \DateTime $purchase_date
     * @return $this
     */
    public function setPurchaseDate($purchase_date)
    {
        $this->container['purchase_date'] = $purchase_date;

        return $this;
    }

    /**
     * Gets integration_x_ref
     * @return string
     */
    public function getIntegrationXRef()
    {
        return $this->container['integration_x_ref'];
    }

    /**
     * Sets integration_x_ref
     * @param string $integration_x_ref
     * @return $this
     */
    public function setIntegrationXRef($integration_x_ref)
    {
        $this->container['integration_x_ref'] = $integration_x_ref;

        return $this;
    }

    /**
     * Gets list_price
     * @return double
     */
    public function getListPrice()
    {
        return $this->container['list_price'];
    }

    /**
     * Sets list_price
     * @param double $list_price
     * @return $this
     */
    public function setListPrice($list_price)
    {
        $this->container['list_price'] = $list_price;

        return $this;
    }

    /**
     * Gets serial_number_ids
     * @return int[]
     */
    public function getSerialNumberIds()
    {
        return $this->container['serial_number_ids'];
    }

    /**
     * Sets serial_number_ids
     * @param int[] $serial_number_ids
     * @return $this
     */
    public function setSerialNumberIds($serial_number_ids)
    {
        $this->container['serial_number_ids'] = $serial_number_ids;

        return $this;
    }

    /**
     * Gets company
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\CompanyReference
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\CompanyReference $company
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets forecast_status
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\OpportunityStatusReference
     */
    public function getForecastStatus()
    {
        return $this->container['forecast_status'];
    }

    /**
     * Sets forecast_status
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\OpportunityStatusReference $forecast_status
     * @return $this
     */
    public function setForecastStatus($forecast_status)
    {
        $this->container['forecast_status'] = $forecast_status;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Procurement\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Procurement\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }

    /**
     * Gets bypass_forecast_update
     * @return bool
     */
    public function getBypassForecastUpdate()
    {
        return $this->container['bypass_forecast_update'];
    }

    /**
     * Sets bypass_forecast_update
     * @param bool $bypass_forecast_update
     * @return $this
     */
    public function setBypassForecastUpdate($bypass_forecast_update)
    {
        $this->container['bypass_forecast_update'] = $bypass_forecast_update;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Procurement\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Procurement\ObjectSerializer::sanitizeForSerialization($this));
    }
}


